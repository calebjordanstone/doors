rt <- grp_data %>% group_by(sub,ses,t,context,train_type) %>% filter(door_correct==1) %>% summarise(rt = min(off)) #time to first correct click offset
res$rt <- rt$rt
fnl <- file.path(project_path,'res',paste(paste(version,exp,mes,'trl',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
View(res)
#   by subject
res <- res %>% group_by(sub,ses,context,switch,train_type) %>% summarise(
n_clicks = mean(n_clicks),
n_cc = mean(n_cc),
n_oc = mean(n_oc),
rt = mean(rt),
accuracy = mean(accuracy)
)
fnl <- file.path(project_path,'res',paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
# lydia barnes, may 2024
# counts, clusters, and/or traces stereotypical behaviour during training to explain performance at test
###
# sources
library(tidyverse)
source(file.path(getwd(),'src','count_stereo.R'))
# lydia barnes, may 2024
# counts, clusters, and/or traces stereotypical behaviour during training to explain performance at test
###
# sources
library(tidyverse)
source(file.path(getwd(),'src-stereo','count_stereo.R'))
###
# settings
version <- 'study-01' #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- 'exp_lt' #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
###
# paths
project_path <- getwd()
data_path <- file.path(project_path,'res')
if(!dir.exists(data_path)){
stop(paste0(data_path,' does not exist'))
}
###
# load event data
fnl <- file.path(data_path,paste(paste(version,exp,mes,'evt',sep='_'),'.csv',sep = ""))
data <- read.table(fnl,header = TRUE)
# filter to train phase
data <- data %>% filter(ses==2)
###
# extract stereotypy metrics
counts <- count_stereo(data)
# lydia barnes, may 2024
# counts, clusters, and/or traces stereotypical behaviour during training to explain performance at test
###
# sources
library(tidyverse)
source(file.path(getwd(),'src-stereo','count_stereo.R'))
###
# settings
version <- 'study-01' #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- 'exp_lt' #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
###
# paths
project_path <- getwd()
data_path <- file.path(project_path,'res')
if(!dir.exists(data_path)){
stop(paste0(data_path,' does not exist'))
}
###
# load event data
fnl <- file.path(data_path,paste(paste(version,exp,mes,'evt',sep='_'),'.csv',sep = ""))
data <- read.table(fnl,header = TRUE)
# filter to train phase
data <- data %>% filter(ses==2)
###
# extract stereotypy metrics
counts <- count_stereo(data)
# lydia barnes, may 2024
# counts, clusters, and/or traces stereotypical behaviour during training to explain performance at test
###
# sources
library(tidyverse)
source(file.path(getwd(),'src-stereo','count_stereo.R'))
###
# settings
version <- 'study-01' #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- 'exp_lt' #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
###
# paths
project_path <- getwd()
data_path <- file.path(project_path,'res')
if(!dir.exists(data_path)){
stop(paste0(data_path,' does not exist'))
}
###
# load event data
fnl <- file.path(data_path,paste(paste(version,exp,mes,'evt',sep='_'),'.csv',sep = ""))
data <- read.table(fnl,header = TRUE)
# filter to train phase
data <- data %>% filter(ses==2)
###
# extract stereotypy metrics
counts <- count_stereo(data)
# lydia barnes, may 2024
# counts, clusters, and/or traces stereotypical behaviour during training to explain performance at test
###
# sources
library(tidyverse)
source(file.path(getwd(),'src-stereo','count_stereo.R'))
###
# settings
version <- 'study-01' #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- 'exp_lt' #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
###
# paths
project_path <- getwd()
data_path <- file.path(project_path,'res')
if(!dir.exists(data_path)){
stop(paste0(data_path,' does not exist'))
}
###
# load event data
fnl <- file.path(data_path,paste(paste(version,exp,mes,'evt',sep='_'),'.csv',sep = ""))
data <- read.table(fnl,header = TRUE)
# filter to train phase
data <- data %>% filter(ses==2)
###
# extract stereotypy metrics
counts <- count_stereo(data)
# lydia barnes, may 2024
# counts, clusters, and/or traces stereotypical behaviour during training to explain performance at test
###
# sources
library(tidyverse)
source(file.path(getwd(),'src-stereo','count_stereo.R'))
###
# settings
version <- 'study-01' #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- 'exp_lt' #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
###
# paths
project_path <- getwd()
data_path <- file.path(project_path,'res')
if(!dir.exists(data_path)){
stop(paste0(data_path,' does not exist'))
}
###
# load event data
fnl <- file.path(data_path,paste(paste(version,exp,mes,'evt',sep='_'),'.csv',sep = ""))
data <- read.table(fnl,header = TRUE)
# filter to train phase
data <- data %>% filter(ses==2)
###
# extract stereotypy metrics
counts <- count_stereo(data)
View(grp_data)
data <- read.table(fnl,header = TRUE)
View(data)
data <- read_csv(fnl,show_col_types = FALSE)
View(data)
data <- data %>% filter(ses==2)
View(data)
switch_trials <- data %>% filter(switch == 1)
View(switch_trials)
events <- data %>% filter(switch == 1,door_oc==1)
View(events)
res <- events %>% group_by(sub,t,context) %>% summarise(n = n(),n_reclicks = n()-unique(doors))
res <- events %>% group_by(sub,t,context) %>% summarise(n = n(),n_reclicks = n()-unique(door))
res <- events %>% group_by(sub,t,context) %>% summarise(n = n(),n_reclicks = n()-length(unique(door)))
View(res)
sub <- 1
se <- 1
co <- 1
events <- data %>% filter(switch==0,sub==su,ses==se,context==co)
su <- 1
events <- data %>% filter(switch==0,sub==su,ses==se,context==co)
View(events)
se <- 2
events <- data %>% filter(switch==0,sub==su,ses==se,context==co)
View(events)
transition_counts <- matrix(0,nrow=16,ncol=16)
nrow(events)
i <- 2
door <- events$door[i]
previous <- events$door[i-1]
View(events)
transition_counts[door,previous] = 1
View(transition_counts)
transition_counts <- matrix(0,nrow=16,ncol=16)
for(i in 2:nrow(events)){
door <- events$door[i]
previous <- events$door[i-1]
transition_counts[door,previous] <- 1 #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
x <- rowSums(transition_counts)
x
x!=0]
x!=0
transition_counts = rowSums(transition_counts)
used <- length(transition_counts[transition_counts!=0])
clicked <- length(transition_counts[transition_counts!=0])
sum(transition_counts)
sum(transition_counts)/clicked
sum(transition_counts)/16
x <- sum(transition_counts)/clicked #how many doors transition onto this door, relative to the total number of doors in play
y <- sum(transition_counts/length(transition_counts))
n_transitions_in_play <- sum(transition_counts)/clicked #how many doors transition onto this door, relative to the total number of doors in play
n_transitions_total <- sum(transition_counts/length(transition_counts))
###
# consistent in transitions?
transitions <- data.frame(
sub = integer(),
ses = integer(),
context = integer(),
transition_rate = double(),
)
transitions <- data.frame(
sub = integer(),
ses = integer(),
context = integer(),
transition_rate = double()
)
for (su in unique(data$sub)){
for(se in unique(data$ses)){
for(co in unique(data$context)){
events <- data %>% filter(switch==0,sub==su,ses==se,context==co)
# get their transitions
transition_counts <- matrix(0,nrow=16,ncol=16)
for(i in 2:nrow(events)){
door <- events$door[i]
previous <- events$door[i-1]
transition_counts[door,previous] <- 1 #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
# sum the unique transitions
transition_counts = rowSums(transition_counts) #how many doors transition to this one?
transition_rate <- sum(transition_counts/length(transition_counts)) #how many doors transition onto this door, relative to the total number of doors?
tmp <- data.frame(su,se,co,transition)
transitions <- rbind(transitions,tmp)
}
}
}
for (su in unique(data$sub)){
for(se in unique(data$ses)){
for(co in unique(data$context)){
events <- data %>% filter(switch==0,sub==su,ses==se,context==co)
# get their transitions
transition_counts <- matrix(0,nrow=16,ncol=16)
for(i in 2:nrow(events)){
door <- events$door[i]
previous <- events$door[i-1]
transition_counts[door,previous] <- 1 #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
# sum the unique transitions
transition_counts = rowSums(transition_counts) #how many doors transition to this one?
transition_rate <- sum(transition_counts/length(transition_counts)) #how many doors transition onto this door, relative to the total number of doors?
tmp <- data.frame(su,se,co,transition_rate)
transitions <- rbind(transitions,tmp)
}
}
}
View(transitions)
renv::checkout()
for (sub in unique(data$sub)){
for(ses in unique(data$ses)){
for(context in unique(data$context)){
events <- data %>% filter(switch==0,sub==sub,ses==ses,context==context)
# get their transitions
transition_counts <- matrix(0,nrow=16,ncol=16)
for(i in 2:nrow(events)){
door <- events$door[i]
previous <- events$door[i-1]
transition_counts[door,previous] <- 1 #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
# sum the unique transitions
transition_counts = rowSums(transition_counts) #how many doors transition to this one?
transition_rate <- sum(transition_counts/length(transition_counts)) #how many doors transition onto this door, relative to the total number of doors?
tmp <- data.frame(sub,ses,context,transition_rate)
transitions <- rbind(transitions,tmp)
}
}
}
###
# consistent in transitions?
transitions <- data.frame(
sub = integer(),
ses = integer(),
context = integer(),
transition_rate = double()
)
for (sub in unique(data$sub)){
for(ses in unique(data$ses)){
for(context in unique(data$context)){
events <- data %>% filter(switch==0,sub==sub,ses==ses,context==context)
# get their transitions
transition_counts <- matrix(0,nrow=16,ncol=16)
for(i in 2:nrow(events)){
door <- events$door[i]
previous <- events$door[i-1]
transition_counts[door,previous] <- 1 #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
# sum the unique transitions
transition_counts = rowSums(transition_counts) #how many doors transition to this one?
transition_rate <- sum(transition_counts/length(transition_counts)) #how many doors transition onto this door, relative to the total number of doors?
tmp <- data.frame(sub,ses,context,transition_rate)
transitions <- rbind(transitions,tmp)
}
}
}
View(transitions)
events <- data %>% filter(switch == 1,door_oc==1)
reclicks <- events %>% group_by(sub,ses,t,context) %>% summarise(n = n(),n_reclicks = n()-length(unique(door)))
View(reclicks)
events <- data %>% filter(switch == 0)
accuracy <- events %>% group_by(sub,ses,t,context) %>% summarise(
n_clicks = n(),
n_correct = sum(door_cc),
accuracy = n_correct/n_clicks)
View(accuracy)
accuracy <- accuracy %>% group_by(sub,ses,context) %>% summarise(accuracy = mean(accuracy))
transitions <- rbind(transitions,list(su,se,co,transition_rate))
View(transitions)
transitions_accuracy <- cbind(accuracy,transitions$transition_rate)
View(transitions)
###
# consistent in transitions?
transitions <- data.frame(
sub = integer(),
ses = integer(),
context = integer(),
transition_rate = double()
)
for (su in unique(data$sub)){
for(se in unique(data$ses)){
for(co in unique(data$context)){
events <- data %>% filter(switch==0,sub==su,ses==se,context==co)
# get their transitions
transition_counts <- matrix(0,nrow=16,ncol=16)
for(i in 2:nrow(events)){
door <- events$door[i]
previous <- events$door[i-1]
transition_counts[door,previous] <- 1 #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
# sum the unique transitions
transition_counts = rowSums(transition_counts) #how many doors transition to this one?
transition_rate <- sum(transition_counts/length(transition_counts)) #how many doors transition onto this door, relative to the total number of doors?
# store
transitions <- rbind(transitions,list(su,se,co,transition_rate))
}
}
}
transitions_accuracy <- cbind(accuracy,transitions$transition_rate)
View(transitions_accuracy)
View(transitions)
###
# consistent in transitions?
transitions <- data.frame(
sub = integer(),
ses = integer(),
context = integer(),
transition_rate = double()
)
for (su in unique(data$sub)){
for(se in unique(data$ses)){
for(co in unique(data$context)){
events <- data %>% filter(switch==0,sub==su,ses==se,context==co)
# get their transitions
transition_counts <- matrix(0,nrow=16,ncol=16)
for(i in 2:nrow(events)){
door <- events$door[i]
previous <- events$door[i-1]
transition_counts[door,previous] <- 1 #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
# sum the unique transitions
transition_counts = rowSums(transition_counts) #how many doors transition to this one?
transition_rate <- sum(transition_counts/length(transition_counts)) #how many doors transition onto this door, relative to the total number of doors?
# store
transitions[nrow(transitions)+1,] <- data.frame(su,se,co,transition_rate)
}
}
}
View(transitions)
transitions_accuracy <- cbind(accuracy,transitions$transition_rate)
View(transitions_accuracy)
transitions_accuracy <- accuracy %>% add_column(transition_rate = transitions$transition_rate)
View(transitions_accuracy)
library(formatR)
path <- file.path(getwd(),'src')
tidy_dir(path) #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(), "src")
tidy_dir(path)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(), "src")
tidy_dir(path)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(), "src")
tidy_dir(path)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(), "src")
tidy_dir(path)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(), "src")
tidy_dir(path)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd())
tidy_dir(path)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(),'src-stereo')
tidy_dir(path)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(),'src-stereo')
tidy_dir(path,width.cutoff = 100)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(),'src-stereo')
tidy_dir(path,width.cutoff = 100,args.newline = TRUE)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(),'src')
tidy_dir(path,width.cutoff = 100,args.newline = TRUE)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(), "src-path")
tidy_dir(path, width.cutoff = 100, args.newline = TRUE)  #width.cutoff = 100,args.newline = TRUE
library(formatR)
path <- file.path(getwd(), "src-paths")
tidy_dir(path, width.cutoff = 100, args.newline = TRUE)  #width.cutoff = 100,args.newline = TRUE
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
# add option to numerically compare true and optimal paths
### sources
library(tidyverse)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(
data_path, paste(
paste(version, exp, mes, "evt", sep = "_"),
".csv", sep = ""
)
)
data <- read_csv(fnl, show_col_types = FALSE)
### insensitive to feedback?  count re-clicks on previous context doors on switch trials
events <- data %>%
filter(switch == 1, door_oc == 1)
reclicks <- events %>%
group_by(sub, ses, t, context) %>%
summarise(n = n(), n_reclicks = n() - length(unique(door)))
reclicks <- reclicks %>%
groub_by(sub, ses, context) %>%
summarise(
clicks = mean(n),
reclicks = mean(n_reclicks)
)
### insensitive to feedback?  count re-clicks on previous context doors on switch trials
events <- data %>%
filter(switch == 1, door_oc == 1)
reclicks <- events %>%
group_by(sub, ses, t, context) %>%
summarise(n = n(), n_reclicks = n() - length(unique(door)))
reclicks <- reclicks %>%
group_by(sub, ses, context) %>%
summarise(
clicks = mean(n),
reclicks = mean(n_reclicks)
)
### accurate?  count accuracy on stay trials
events <- data %>%
filter(switch == 0)
accuracy <- events %>%
group_by(sub, ses, t, context) %>%
summarise(
n_clicks = n(), n_correct = sum(door_cc),
accuracy = n_correct/n_clicks
)
accuracy <- accuracy %>%
group_by(sub, ses, context) %>%
summarise(accuracy = mean(accuracy))
### consistent in transitions?
transitions <- data.frame(sub = integer(), ses = integer(), context = integer(), transition_rate = double())
for (su in unique(data$sub)) {
for (se in unique(data$ses)) {
for (co in unique(data$context)) {
events <- data %>%
filter(switch == 0, sub == su, ses == se, context == co, door_cc == 1)
# get their transitions
transition_counts <- matrix(0, nrow = 16, ncol = 16)
for (i in 2:nrow(events)) {
door <- events$door[i]
previous <- events$door[i - 1]
transition_counts[door, previous] <- 1  #yes, this transition happened. to count frequency: transition_counts[door,previous]+1
}
# sum the unique transitions
transition_counts = rowSums(transition_counts)  #how many doors transition to this one?
transition_rate <- sum(transition_counts/length(transition_counts))  #how many doors transition onto this door, relative to the total number of doors?
# store
transitions[nrow(transitions) +
1, ] <- data.frame(su, se, co, transition_rate)
}
}
}
transitions_accuracy <- accuracy %>%
add_column(transition_rate = transitions$transition_rate)
View(transitions_accuracy)
