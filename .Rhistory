if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- 0
}else{
# count all doors before their first error as evidence for learning those doors
tryCatch({
first_error <- min(which(diff(tdata$door_cc)==-1))
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- 1
}, warning = function(w){
message(trial)
learn_doors[,i] <- 1 # if first_error doesn't exist, they've learned all four doors
}
)
}
}
ntrials <- length(unique(events$t))
nstrategies <- 4
learn_doors <- matrix(0,nstrategies,ntrials)
# for remaining trials,
for (i in 1:ntrials){
trial <- unique(events$t)[i]
tdata <- events %>% filter(t==trial)
if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- 0
}else{
# count all doors before their first error as evidence for learning those doors
tryCatch({
first_error <- min(which(diff(tdata$door_cc)==-1))
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- 1
}, warning = function(w){
message(i)
learn_doors[,i] <- 1 # if first_error doesn't exist, they've learned all four doors
}
)
}
}
learn_doors <- matrix(0,nstrategies,ntrials)
# for remaining trials,
for (i in 1:ntrials){
trial <- unique(events$t)[i]
tdata <- events %>% filter(t==trial)
if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- 0
}else{
# count all doors before their first error as evidence for learning those doors
tryCatch({
first_error <- min(which(diff(tdata$door_cc)==-1))
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- 1
}, warning = function(w){
learn_doors[,i] <- 1 # if first_error doesn't exist, they've learned all four doors
message(i)
}
)
}
}
learn_doors <- matrix(0,nstrategies,ntrials)
# for remaining trials,
for (i in 1:ntrials){
trial <- unique(events$t)[i]
tdata <- events %>% filter(t==trial)
if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- 0
}else{
# count all doors before their first error as evidence for learning those doors
tryCatch({
first_error <- min(which(diff(tdata$door_cc)==-1))
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- 1
}, warning = function(w){
learn_doors[,i] <- 1 # if first_error doesn't exist, they've learned all four doors
browser()
message(i)
}
)
}
}
source("~/Documents/academe/projects/doors/src-learn/format_data_for_maggi.R", echo=TRUE)
# lydia barnes, may 2024
# reads event data from doors task
# re-codes accuracy so that "success" trials (<=4 clicks) that inc. context-irrelevant doors are counted as failures
# classifies trials by whether they provide evidence for learning 1, 2, 3, or 4 doors
# sources
library(tidyverse)
# parameters
ncontext <- 1
nses <- 1
nsub <- 2
# event data
events <- read.csv('res/study-01_exp_lt_clicks_evt.csv')
events <- events %>% filter(context==ncontext, ses==nses, sub==nsub)
# find the first trial in which each door is the target (i.e. people's first opportunity to learn)
doors <- events %>% filter(door_cc==1) %>% pull(door) %>% unique()
target_idx <- c(which(diff(events$t)==1),length(events$door))
target <- events$door[target_idx]
first_feedback <- rep(0,1,length(doors))
for (i in 1:length(doors)){
first_feedback[i] <- events$t[target_idx[min(which(targets==doors[i]))]]
}
# exclude trials w <4 clicks on which all doors were context-relevant
uninformative <- events %>% group_by(t) %>% summarise(clicks = n(),accuracy = mean(door_cc)) %>%
mutate(exclude = case_when((accuracy==1 & clicks<4) ~ t,.default=0)) %>% filter(exclude!=0) %>% pull(exclude)
events <- events %>% filter(!(t %in% uninformative))
# preallocate arrays
ntrials <- length(unique(events$t))
nstrategies <- 4
learn_doors <- matrix(0,nstrategies,ntrials)
# for remaining trials,
for (i in 1:ntrials){
trial <- unique(events$t)[i]
tdata <- events %>% filter(t==trial)
if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- 0
}else{
# count all doors before their first error as evidence for learning those doors
first_error <- NA
try({
first_error <- min(which(diff(tdata$door_cc)==-1))
}, warning = function(w){
message()
})
if(is.na(first_error)){
learn_doors[,i] <- 1 # if first_error doesn't exist, they've learned all four doors
}else{
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- 1
}
}
}
source("~/Documents/academe/projects/doors/src-learn/format_data_for_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/format_data_for_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/format_data_for_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/format_data_for_maggi.R", echo=TRUE)
View(learn_doors)
View(learn_doors)
?order
x <- order(learn_doors)
x <- order(list(learn_doors[1,],learn_doors[2,],learn_doors[3,],learn_doors[,4]))
x <- sort.list(list(learn_doors[1,],learn_doors[2,],learn_doors[3,],learn_doors[,4]))
x <- sort(list(learn_doors[1,],learn_doors[2,],learn_doors[3,],learn_doors[,4]))
x <- list(learn_doors[1,],learn_doors[2,],learn_doors[3,],learn_doors[,4])
View(x)
x <- list(learn_doors[1,],learn_doors[2,],learn_doors[3,],learn_doors[4,])
y <- sort(x)
y <- sort.list(x)
order(x)
y <- order(learn_doors)
y
?mi
?min
first_selection <- apply(learn_doors,1,FUN=min)
first_selection
first_selection <- apply(learn_doors,1,FUN=which.min)
first_selection
first_selection <- apply(learn_doors,1,FUN=which)
first_selection <- apply(as.logical(learn_doors),1,FUN=which)
as.logical(learn_doors)
# lydia barnes, may 2024
# reads event data from doors task
# re-codes accuracy so that "success" trials (<=4 clicks) that inc. context-irrelevant doors are counted as failures
# classifies trials by whether they provide evidence for learning 1, 2, 3, or 4 doors
# sources
library(tidyverse)
# parameters
ncontext <- 1
nses <- 1
nsub <- 2
# event data
events <- read.csv('res/study-01_exp_lt_clicks_evt.csv')
events <- events %>% filter(context==ncontext, ses==nses, sub==nsub)
# find the first trial in which each door is the target (i.e. people's first opportunity to learn)
doors <- events %>% filter(door_cc==1) %>% pull(door) %>% unique()
target_idx <- c(which(diff(events$t)==1),length(events$door))
target <- events$door[target_idx]
first_feedback <- rep(0,1,length(doors))
for (i in 1:length(doors)){
first_feedback[i] <- events$t[target_idx[min(which(targets==doors[i]))]]
}
# exclude trials w <4 clicks on which all doors were context-relevant
uninformative <- events %>% group_by(t) %>% summarise(clicks = n(),accuracy = mean(door_cc)) %>%
mutate(exclude = case_when((accuracy==1 & clicks<4) ~ t,.default=0)) %>% filter(exclude!=0) %>% pull(exclude)
events <- events %>% filter(!(t %in% uninformative))
# preallocate arrays
ntrials <- length(unique(events$t))
nstrategies <- 4
learn_doors <- matrix(FALSE,nstrategies,ntrials)
# for remaining trials,
for (i in 1:ntrials){
trial <- unique(events$t)[i]
tdata <- events %>% filter(t==trial)
# if they haven't had a chance to experience a door as a target, treat it as context-irrelevant
if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- FALSE
}else{
# count all doors before their first error as evidence for learning those doors
try(first_error <- min(which(diff(tdata$door_cc)==-1)), silent = TRUE)
if(is.infinite(first_error)){
learn_doors[,i] <- TRUE # if first_error doesn't exist, they've learned all four doors
}else{
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- TRUE
}
}
}
first_selection <- apply(learn_doors,1,FUN=which)
first_selection
first_selection <- apply(learn_doors,1,FUN=which.min)
first_selection
first_selection <- apply(learn_doors,1,FUN=which)[,1]
first_selection <- apply(learn_doors,1,FUN=min(which))
first_selection <- apply(learn_doors,1,FUN=which) %>% min()
first_selection <- apply(learn_doors,1,FUN=which) %>% lapply(.data,min)
first_selection <- lapply(1:length(first_selection),min,x=first_selection)
first_selection
first_selection <- apply(learn_doors,1,FUN=which)
first_selection
first_selection <- lapply(1:length(first_selection),min,x=first_selection)
first_selection <- apply(learn_doors,1,FUN=which)
first_selection <- lapply(1:length(first_selection),min,x=unlist(first_selection))
first_selection
first_selection <- rep(0,1,nstrategies)
# find the order in which they first selected the doors
first_selection <- rep(0,nstrategies)
for (i in 1:nstrategies){
first_selection[i] <- min(which(learn_doors[i,]==1))
}
# lydia barnes, may 2024
# reads event data from doors task
# re-codes accuracy so that "success" trials (<=4 clicks) that inc. context-irrelevant doors are counted as failures
# classifies trials by whether they provide evidence for learning 1, 2, 3, or 4 doors
# sources
library(tidyverse)
# parameters
ncontext <- 1
nses <- 1
nsub <- 2
# event data
events <- read.csv('res/study-01_exp_lt_clicks_evt.csv')
events <- events %>% filter(context==ncontext, ses==nses, sub==nsub)
# find the first trial in which each door is the target (i.e. people's first opportunity to learn)
doors <- events %>% filter(door_cc==1) %>% pull(door) %>% unique()
target_idx <- c(which(diff(events$t)==1),length(events$door))
target <- events$door[target_idx]
first_feedback <- rep(0,1,length(doors))
for (i in 1:length(doors)){
first_feedback[i] <- events$t[target_idx[min(which(targets==doors[i]))]]
}
# exclude trials w <4 clicks on which all doors were context-relevant
uninformative <- events %>% group_by(t) %>% summarise(clicks = n(),accuracy = mean(door_cc)) %>%
mutate(exclude = case_when((accuracy==1 & clicks<4) ~ t,.default=0)) %>% filter(exclude!=0) %>% pull(exclude)
events <- events %>% filter(!(t %in% uninformative))
# preallocate arrays
trials <- unique(events$t)
ntrials <- length(trials)
nstrategies <- 4
learn_doors <- matrix(0,nstrategies,ntrials)
# for remaining trials,
for (i in 1:ntrials){
trial <- trials[i]
tdata <- events %>% filter(t==trial)
# if they haven't had a chance to experience a door as a target, treat it as context-irrelevant
if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- 0
}else{
# count all doors before their first error as evidence for learning those doors
try(first_error <- min(which(diff(tdata$door_cc)==-1)), silent = TRUE)
if(is.infinite(first_error)){
learn_doors[,i] <- 1 # if first_error doesn't exist, they've learned all four doors
}else{
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- 1
}
}
}
# find the order in which they first selected the doors
first_selection <- rep(0,nstrategies)
for (i in 1:nstrategies){
first_selection[i] <- min(which(learn_doors[i,]==1))
}
# exclude trials on which already selected doors weren't among those selected
for (i in 1:ntrials){
for (j in 1:nstrategies){
if(trials[i]>first_selection[j] & learn_doors[j,i]==0){
learn_doors[,i] <- 0
}
}
}
# lydia barnes, may 2024
# reads event data from doors task
# re-codes accuracy so that "success" trials (<=4 clicks) that inc. context-irrelevant doors are counted as failures
# classifies trials by whether they provide evidence for learning 1, 2, 3, or 4 doors
# sources
library(tidyverse)
# parameters
ncontext <- 1
nses <- 1
nsub <- 1
# event data
events <- read.csv('res/study-01_exp_lt_clicks_evt.csv')
events <- events %>% filter(context==ncontext, ses==nses, sub==nsub)
# find the first trial in which each door is the target (i.e. people's first opportunity to learn)
doors <- events %>% filter(door_cc==1) %>% pull(door) %>% unique()
target_idx <- c(which(diff(events$t)==1),length(events$door))
target <- events$door[target_idx]
first_feedback <- rep(0,1,length(doors))
for (i in 1:length(doors)){
first_feedback[i] <- events$t[target_idx[min(which(targets==doors[i]))]]
}
# exclude trials w <4 clicks on which all doors were context-relevant
uninformative <- events %>% group_by(t) %>% summarise(clicks = n(),accuracy = mean(door_cc)) %>%
mutate(exclude = case_when((accuracy==1 & clicks<4) ~ t,.default=0)) %>% filter(exclude!=0) %>% pull(exclude)
events <- events %>% filter(!(t %in% uninformative))
# preallocate arrays
trials <- unique(events$t)
ntrials <- length(trials)
nstrategies <- 4
learn_doors <- matrix(0,nstrategies,ntrials)
# for remaining trials,
for (i in 1:ntrials){
trial <- trials[i]
tdata <- events %>% filter(t==trial)
# if they haven't had a chance to experience a door as a target, treat it as context-irrelevant
if(trial < max(first_feedback)){
chance_doors <- doors[which(first_feedback>=trial)]
tdata <- tdata %>% mutate(door_cc = case_when(door %in% chance_doors ~ 0, .default=door_cc))
}
# if the first door clicked is context-irrelevant, count that as evidence against learning
if(tdata$door_cc[1]==0){
learn_doors[,i] <- 0
}else{
# count all doors before their first error as evidence for learning those doors
try(first_error <- min(which(diff(tdata$door_cc)==-1)), silent = TRUE)
if(is.infinite(first_error)){
learn_doors[,i] <- 1 # if first_error doesn't exist, they've learned all four doors
}else{
these_doors <- unique(tdata$door[1:first_error])
door_idx <- match(these_doors,doors)
learn_doors[door_idx,i] <- 1
}
}
}
# find the order in which they first selected the doors
first_selection <- rep(0,nstrategies)
for (i in 1:nstrategies){
first_selection[i] <- min(which(learn_doors[i,]==1))
}
# exclude trials on which already selected doors weren't among those selected
for (i in 1:ntrials){
for (j in 1:nstrategies){
if(trials[i]>first_selection[j] & learn_doors[j,i]==0){
learn_doors[,i] <- 0
}
}
}
df$trial <- trials
strategies$trial <- trials
strategies <- tibble()
strategies$trial <- trials
strategies <- data.frame(trials,learn_one=learn_doors[1,])
View(strategies)
rank(first_selection)
View(learn_doors)
order(first_selection)
first_selection <- c(16,10,2,20)
order(first_selection)
source("~/Documents/academe/projects/doors/src-learn/format_data_for_maggi.R", echo=TRUE)
View(strategies)
View(strategies)
View(learn_doors)
source("~/Documents/academe/projects/doors/src-learn/format_data_for_maggi.R", echo=TRUE)
View(events)
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1)
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1)
View(strategies)
data <- strategies %>% pull(learn_one)
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
data
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
targets==doors[i]
doors
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
View(strategies)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
plot(strategies$trial,alphas,type="l",col="darkgreen")
points(strategies$trial,betas,type="l",col="navy")
# view alphas and betas over time
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
View(strategies)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
View(strategies)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
plot(1:length(data),betas,type="l",col="navy")
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
