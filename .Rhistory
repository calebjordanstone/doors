###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
) %>% select(!n_clicks:n_correct)
fnl <- file.path(project_path,'res',paste(version,'_trl.csv',sep = ""))
write_csv(res,fnl)
#   by subject
res <- res %>% group_by(sub,group,cond) %>% summarise(rt = mean(rt),accuracy = mean(accuracy))
fnl <- file.path(project_path,'res',paste(version,'_avg.csv',sep = ""))
write_csv(res,fnl)
View(res)
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# remove redundancy bw door_correct and door_cc
# produce alternate results grouped by door identity instead of nclicks
###
# sources
library(tidyverse)
source(file.path(getwd(),'src','get_data.R'))
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
# cluster participants based on stereotypy and accuracy
# use maggi method to trace change in stereotypy (extent or type)
#--------------------------------------------------------------------------------------------------
# sources
library(tidyverse)
library(gtools)
install.packages("gtools")
renv::snapshot()
source("~/Documents/academe/projects/doors/src-stereo/run_stereo.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-stereo/run_stereo.R", echo=TRUE)
setwd("~/Documents/academe/projects/doors")
source("~/Documents/academe/projects/doors/src-stereo/run_stereo.R", echo=TRUE)
tr <- 1, trial <- events %>% filter(t==tr)
tr <- 1; trial <- events %>% filter(t==tr)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
# cluster participants based on stereotypy and accuracy
# use maggi method to trace change in stereotypy (extent or type)
#--------------------------------------------------------------------------------------------------
# sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
# settings
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks" # measure: 'clicks' or 'hovers'. usually want 'clicks'.
# paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
#--------------------------------------------------------------------------------------------------
# load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses == 2)
# load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
# load graph of distances between doors
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
events <- data %>%
filter(switch == 0)
View(events)
su <- 1; se <- 1; co <- 1; ss <- 1;
events <- data %>% filter(switch == 0, sub == su, ses == se, context == co, door_cc == 1, subses == ss)
View(data)
# load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses == 2)
View(data)
events <- data %>% filter(switch == 0, sub == su, ses == se, context == co, door_cc == 1, subses == ss)
View(events)
View(data)
se = 2
events <- data %>% filter(switch == 0, sub == su, ses == se, context == co, door_cc == 1, subses == ss)
doors_cc <- unique(events$door)
shortest <- opt_sub$path_weight[1]
trial <- events %>% filter(t == tr)
opt_sub <- opt %>% filter(sub == su, context == co, algorithm == "tsp")
shortest <- opt_sub$path_weight[1]
trial <- events %>% filter(t == tr)
unique(opt_sub$solution)
View(opt_sub)
trial$door
trial <- events %>% filter(t == tr)
tr <- 10
trial <- events %>% filter(t == tr)
View(trial)
View(events)
tr <- 55
trial <- events %>% filter(t == tr)
View(opt_sub)
source("~/Documents/academe/projects/doors/src-paths/format_paths.R", echo=TRUE)
View(opt)
source("~/Documents/academe/projects/doors/src-paths/format_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-stereo/run_stereo.R", echo=TRUE)
unique(opt_sub$solution)
source("~/Documents/academe/projects/doors/src-stereo/run_stereo.R", echo=TRUE)
lifecycle::last_lifecycle_warnings()
source("~/Documents/academe/projects/doors/src-stereo/run_stereo.R", echo=TRUE)
View(path_match)
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
# TODO: remove redundancy bw door_correct and door_cc produce alternate results grouped by door
# identity instead of nclicks
### sources
library(tidyverse)
source(file.path(getwd(), "src", "get_subs.R"))
source(file.path(getwd(), "src", "get_switch.R"))
source(file.path(getwd(), "src", "get_data.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn", "ses-train", "ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
# !you can change the following settings if you want to, but the defaults will usually be fine
mes <- "clicks" # measure: 'clicks' or 'hovers'. usually want 'clicks'.
if (mes == "clicks") {
idx <- 1
} else {
idx <- 2
}
apply_threshold <- FALSE # only retain events that lasted more than a given duration?
min_dur <- 0.1 # minimum duration
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), door = integer(),
door_correct = integer(), on = numeric(), off = numeric(), subses = integer(), door_cc = integer(),
door_oc = integer(), switch = integer(), train_type = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
for (ses in sess) {
train_type <- NA
if (ses == "ses-test") {
# we calculate people's training group from the switch rate in their train phase data.
# copy that information into the test phase data
train_type <- grp_data %>%
filter(sub == sub & ses == 2) %>%
select(train_type)
}
data <- get_data(data_path, exp, sub, ses, train_type, apply_threshold, min_dur) # load and format raw data
grp_data <- rbind(grp_data, data[[idx]]) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
# save the formatted data
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
write_csv(grp_data, fnl)
### extract accuracy and response time averages from event data
# by trial
res <- grp_data %>%
group_by(sub, ses, t, context, train_type) %>%
summarise(
switch = max(switch), n_clicks = n(), n_correct = sum(door_correct), n_cc = sum(door_cc),
n_oc = sum(door_oc), accuracy = n_correct / n_clicks,
)
rt <- grp_data %>%
group_by(sub, ses, t, context, train_type) %>%
filter(door_correct == 1) %>%
summarise(rt = min(off)) # time to first correct click offset
res$rt <- rt$rt
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "trl", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# by subject
res <- res %>%
group_by(sub, ses, context, switch, train_type) %>%
summarise(n_clicks = mean(n_clicks), n_cc = mean(n_cc), n_oc = mean(n_oc), rt = mean(rt), accuracy = mean(accuracy))
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
View(data)
View(grp_data)
View(res)
View(grp_data)
train_type
train_type <- grp_data %>%
filter(sub == sub & ses == 2) %>%
select(train_type) %>%
unique()
train_type
train_type <- grp_data %>%
filter(sub == sub & ses == 2) %>%
select(train_type)
unique(train_type)
View(train_type)
train_type <- grp_data %>%
filter(sub == sub & ses == 2)
View(train_type)
sub
sub[6]
sub[5]
sub[1]
sub[[1]]
unlist(sub)
unlist(sub)[1]
unlist(sub)[[1]]
sub[[1]][1]
sub[[1]][[1]]
substring(sub,6,7)
substring(sub,5,7)
as.numeric(substring(sub,5,7))
sid <- as.numeric(substring(sub,5,7))
train_type <- grp_data %>%
filter(sub == sid, ses == 2)
View(train_type)
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type)
View(train_type)
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique()
View(train_type)
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique()[[1]]
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>% pull()
View(grp_data)
source("~/Documents/academe/projects/doors/src/run_wrangling.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src/run_wrangling.R", echo=TRUE)
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
source(file.path(getwd(), "src", "get_subs.R"))
source(file.path(getwd(), "src", "get_switch.R"))
source(file.path(getwd(), "src", "get_data.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn", "ses-train", "ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
# !you can change the following settings if you want to, but the defaults will usually be fine
mes <- "clicks" # measure: 'clicks' or 'hovers'. usually want 'clicks'.
if (mes == "clicks") {
idx <- 1
} else {
idx <- 2
}
apply_threshold <- FALSE # only retain events that lasted more than a given duration?
min_dur <- 0.1 # minimum duration
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), on = numeric(), off = numeric(), subses = integer(), door_oc = integer(),
switch = integer(), train_type = integer()
)
ses == "ses-learn"
ses <- "ses-learn"
data <- get_data(data_path, exp, sub, ses, train_type, context_one_doors, apply_threshold, min_dur) # load and format raw data
grp_data <- rbind(grp_data, data[[idx]]) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
View(grp_data)
ses <- "ses-train"
data <- get_data(data_path, exp, sub, ses, train_type, context_one_doors, apply_threshold, min_dur) # load and format raw data
grp_data <- rbind(grp_data, data[[idx]]) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
ses <- "ses-test"
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
context_one_doors <- grp_data %>%
filter(context==1,door_cc==1) %>%
unique(door) %>%
pull()
context_one_doors <- grp_data %>%
filter(context==1,door_cc==1)
View(grp_data)
context_one_doors <- grp_data %>%
filter(context==1,door_cc==1) %>%
select(door)
View(context_one_doors)
context_one_doors <- grp_data %>%
filter(context==1,door_cc==1) %>%
select(door) %>%
unique() %>%
pull()
data <- get_data(data_path, exp, sub, ses, train_type, context_one_doors, apply_threshold, min_dur) # load and format raw data
force(context_one_doors)
transfer_one=context_one_doors
transfer_one <- clicks %>% filter(context==1,door_cc==1) %>% select(door) %>% unique() %>% pull()
transfer_one==context_one_doors
transfer_one[order(names(transfer_one))]==context_one_doors[order(names(context_one_doors))]
transfer_one
compare(context_one_doors,transfer_one)
compareIgnoreOrder(context_one_doors,transfer_one)
order(transfer_one)
order(transfer_one)
order(list(1,2,3,5,1))
x <- list(1,2,3,5,1)
sort(x)
sort(values(x))
sort(names(x))
unlist(x)
sort(x)
y <- unlist(x)
sort(y)
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
source(file.path(getwd(), "src", "get_subs.R"))
source(file.path(getwd(), "src", "get_switch.R"))
source(file.path(getwd(), "src", "get_data.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn", "ses-train", "ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
# !you can change the following settings if you want to, but the defaults will usually be fine
mes <- "clicks" # measure: 'clicks' or 'hovers'. usually want 'clicks'.
if (mes == "clicks") {
idx <- 1
} else {
idx <- 2
}
apply_threshold <- FALSE # only retain events that lasted more than a given duration?
min_dur <- 0.1 # minimum duration
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), on = numeric(), off = numeric(), subses = integer(), door_oc = integer(),
switch = integer(), train_type = integer(), train_context_transferred = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
context_one_doors <- grp_data %>%
filter(context==1,door_cc==1) %>%
select(door) %>%
unique() %>%
pull()
}
data <- get_data(data_path, exp, sub, ses, train_type, context_one_doors, apply_threshold, min_dur) # load and format raw data
grp_data <- rbind(grp_data, data[[idx]]) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
# save the formatted data
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
write_csv(grp_data, fnl)
### extract accuracy and response time averages from event data
source("~/Documents/academe/projects/doors/src/run_wrangling.R", echo=TRUE)
grp_data %>%
filter(context==1,door_cc==1) %>%
select(door) %>%
unique() %>%
pull()
source("~/Documents/academe/projects/doors/src/run_wrangling.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src/run_wrangling.R", echo=TRUE)
c("ses-learn"=1, "ses-train"=2, "ses-test"=3)
x <- c("ses-learn"=1, "ses-train"=2, "ses-test"=3)
x[1]
for (s in x){print(s)}
for (s in x){print(name(s))}
for (s in x){print(names(s))}
for (s in x){print(names(x))}
for (s in x){print(names(x[x==s]))}
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
View(obs)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
View(obs)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
nrow(unique(obs$t))
length(unique(obs$t))
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
rle(obs$t)
t <- list(1,6,10,105)
x <- rle(obs$t)
t %in% x
t %in% x.values
t %in% values(x)
x
any(x)==t
t==6
t
t <- list(1,6,105,186,247,320)
t==x
t <- as.matrix(t)
t
t==as.matrix(x)
as.matrix(x) %in% t
MAP(t,x)
mapply(function, ...)(t,x)
Map(`%in%`,t,x)
y <- Map(`%in%`,t,x)
unlist(y)
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
obs <- obs %>%
filter(unlist(Map(`%in%`,t,replicates)))
replicates
x <- replicates[replicates>3]
x <- replicates.lengths
x <- replicates.lengths()
x <- lengths(replciates)
x <- lengths(replicates)
x
x <- rev(rep(6:10, 1:5))
x
replicates$lengths
obs <- obs %>%
filter(unlist(Map(`%in%`,t,replicates$values)))
intersect(obs$t,replicates$values)
View(replicates)
replicates[["values"]]
intersect(replicates$values,obs$t)
replicates$values==obs$t
obs$t %in% replicates$values
obs$t
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
obs %>%
filter(t %in%replicates$values)
obs <- obs %>%
filter(t %in%replicates$values)
View(obs)
View(replicates)
replicates$values
replicates$values[replicates$lengths>3]
obs <- obs %>%
filter(t %in% replicates$values[replicates$lengths>3])
length(unique(obs$t))
source("~/Documents/academe/projects/doors/src-paths/plot_paths.R", echo=TRUE)
