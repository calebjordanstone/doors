labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res <- res %>% mutate(context = case_when(context==0~"Context 1",context==1~"Context 2"))
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context 1",context==2~"Context 2"))
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context 1",context==2~"Context 2"))
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240409"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-learn' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .2),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=rt),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=rt),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=rt),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240409"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
if(ses == 'ses-learn'){ #don't split learning phase data by training type, as that's irrelevant
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}else{
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}
fnl <- file.path(project_path,'fig',paste(paste(version,exp,ses,mes,'avg',sep='_'),'.pdf',sep = ""))
ggsave(fnl,plot = last_plot())
View(res)
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240409"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
if(ses == 'ses-learn'){ #don't split learning phase data by training type, as that's irrelevant
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}else{
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Stay","Switch")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}
fnl <- file.path(project_path,'fig',paste(paste(version,exp,ses,mes,'avg',sep='_'),'.pdf',sep = ""))
ggsave(fnl,plot = last_plot())
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# remove redundancy bw door_correct and door_cc
# save full click and hover data as well as trial- and subject-grouped results
# produce alternate results grouped by door identity instead of nclicks
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit/pilot-data'
# settings
version <- '20240409' #pilot: 20240325 (train and test), 20240409 (D&E learn and train)
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp,version)
sess <- c('ses-learn','ses-train') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
apply_threshold <- FALSE #only retain events that lasted more than a given duration?
min_dur <- 0.1 #minimum duration
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
door = integer(),
door_correct = integer(),
on = numeric(),
off = numeric(),
door_cc = integer(),
door_oc = integer(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
train_type <- NA
if(ses == 'ses-test'){
train_type <- grp_data %>% filter(sub == sub & ses == 2) %>% select(train_type)
}
data <- get_data(data_path,exp,sub,ses,train_type,apply_threshold,min_dur)
grp_data <- rbind(grp_data,data[[idx]])
}
}
subs <- get_subs(exp,version)
source(file.path(wd,'get_subs.R'))
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit/pilot-data'
# settings
version <- '20240409' #pilot: 20240325 (train and test), 20240409 (D&E learn and train)
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp,version)
sess <- c('ses-learn','ses-train') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
apply_threshold <- FALSE #only retain events that lasted more than a given duration?
min_dur <- 0.1 #minimum duration
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
door = integer(),
door_correct = integer(),
on = numeric(),
off = numeric(),
door_cc = integer(),
door_oc = integer(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
train_type <- NA
if(ses == 'ses-test'){
train_type <- grp_data %>% filter(sub == sub & ses == 2) %>% select(train_type)
}
data <- get_data(data_path,exp,sub,ses,train_type,apply_threshold,min_dur)
grp_data <- rbind(grp_data,data[[idx]])
}
}
View(grp_data)
sub_08 <- filter(grp_data,sub==8)
View(sub_08)
distinct(sub_08$door)
doors <- sub_08 %>% distinct(door)
View(doors)
doors <- sub_08 %>% group_by(ses) %>% distinct(door)
doors <- resps %>% filter(door_correct == 1) %>% group_by(context) %>% distinct(door)
doors <- sub_08 %>% filter(door_correct == 1) %>% group_by(ses) %>% distinct(door)
doors <- sub_08 %>% filter(door_correct == 1) %>% group_by(ses,context) %>% distinct(door)
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# remove redundancy bw door_correct and door_cc
# save full click and hover data as well as trial- and subject-grouped results
# produce alternate results grouped by door identity instead of nclicks
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit/pilot-data'
# settings
version <- '20240409' #pilot: 20240325 (train and test), 20240409 (D&E learn and train)
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp,version)
sess <- c('ses-learn','ses-train') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
apply_threshold <- FALSE #only retain events that lasted more than a given duration?
min_dur <- 0.1 #minimum duration
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
door = integer(),
door_correct = integer(),
on = numeric(),
off = numeric(),
door_cc = integer(),
door_oc = integer(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
train_type <- NA
if(ses == 'ses-test'){
train_type <- grp_data %>% filter(sub == sub & ses == 2) %>% select(train_type)
}
data <- get_data(data_path,exp,sub,ses,train_type,apply_threshold,min_dur)
grp_data <- rbind(grp_data,data[[idx]])
}
}
sub_22 <- filter(grp_data,sub==22)
doors_22 <- sub_22 %>% filter(door_correct == 1) %>% group_by(ses,context) %>% distinct(door)
View(doors_22)
View(sub_22)
View(doors_22)
View(sub_08)
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# remove redundancy bw door_correct and door_cc
# save full click and hover data as well as trial- and subject-grouped results
# produce alternate results grouped by door identity instead of nclicks
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit/pilot-data'
# settings
version <- 'pilot-data-02' #pilot: 00 (train and test), 01 (D&E learn and train), 02 (learn and train, new code)
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp,version)
sess <- c('ses-learn','ses-train') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
apply_threshold <- FALSE #only retain events that lasted more than a given duration?
min_dur <- 0.1 #minimum duration
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
door = integer(),
door_correct = integer(),
on = numeric(),
off = numeric(),
door_cc = integer(),
door_oc = integer(),
switch = integer(),
train_type = integer()
)
sub <- subs(1)
subs <- get_subs(exp,version)
sub <- subs[1]
ses <- sess[1]
train_type <- NA
if(version=='pilot-data-00' || version=='pilot-data-01'){
trials_here <- file.exists(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'task-mforage_trls.tsv',sep='_')))
resps_here <- file.exists(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'task-mforage_beh.tsv',sep='_')))
}else{
haus <- c('house-1','house-2')
success <- c()
for(h in haus){
success <- rbind(success,file.exists(file.path(data_path,exp,sub,ses,haus,'beh',paste(sub,ses,'task-mforage_trls.tsv',sep='_'))))
success <- rbind(success,file.exists(file.path(data_path,exp,sub,ses,haus,'beh',paste(sub,ses,'task-mforage_beh.tsv',sep='_'))))
}
}
success
file.path(data_path,exp,sub,ses,haus,'beh',paste(sub,ses,'task-mforage_trls.tsv',sep='_'))
data_path <- file.path('/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit',version)
file.path(data_path,exp,sub,ses,haus,'beh',paste(sub,ses,'task-mforage_trls.tsv',sep='_'))
file.path(data_path,exp,sub,ses,h,'beh',paste(sub,ses,'task-mforage_trls.tsv',sep='_')
)
file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,h,'task-mforage_trls.tsv',sep='_'))
if(version=='pilot-data-00' || version=='pilot-data-01'){
trials_here <- file.exists(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'task-mforage_trls.tsv',sep='_')))
resps_here <- file.exists(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'task-mforage_beh.tsv',sep='_')))
}else{
haus <- c('house-1','house-2')
success <- c()
for(h in haus){
success <- rbind(success,file.exists(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,h,'task-mforage_trls.tsv',sep='_'))))
success <- rbind(success,file.exists(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,h,'task-mforage_beh.tsv',sep='_'))))
}
}
h
success
all(success)
any(success)
trials <- read.table(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'house-1','task-mforage_trls.tsv',sep='_')),header = TRUE)
trials <- rbind(trials,read.table(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'house-2','task-mforage_trls.tsv',sep='_')),header = TRUE))
resps <- read.table(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'house-1','task-mforage_beh.tsv',sep='_')),header = TRUE)
resps <- rbind(resps,read.table(file.path(data_path,exp,sub,ses,'beh',paste(sub,ses,'house-1','task-mforage_beh.tsv',sep='_')),header = TRUE))
View(trials)
