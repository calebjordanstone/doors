angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Context %d",ctx), x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
)
}
# make multi-panel
pl[[counter]] <- ggarrange(plotlist=this_pl, labels(title = sprintf("Subjects %d to %d", up, up+3)))
}
up+3
up
up[[1]]
unlist(up)
pl[[counter]] <- ggarrange(plotlist=this_pl, labels(title = sprintf("Subjects %3.2f to %3.2f", up, up+3)) )
sprintf("Subjects %3.2f to %3.2f", up, up+3)
sprintf("Subjects %d to %d", up, up+3)
pl <- list()
counter <- 0
for (up in unique_paths){
counter <- counter+1
this_pl <- list()
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == up, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == up, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
this_pl[[ctx]] <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Context %d",ctx), x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank, axis.title.y = element_blank(),
)
}
# make multi-panel
pl[[counter]] <- ggarrange(plotlist=this_pl)
annotate_figure(plot, top = text_grob(sprintf("Subjects %d to %d", up, up+3), size = title_sz))
}
pl <- list()
counter <- 0
for (up in unique_paths){
counter <- counter+1
this_pl <- list()
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == up, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == up, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
this_pl[[ctx]] <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Context %d",ctx), x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
)
}
# make multi-panel
pl[[counter]] <- ggarrange(plotlist=this_pl)
annotate_figure(plot, top = text_grob(sprintf("Subjects %d to %d", up, up+3), size = title_sz))
}
pl <- list()
counter <- 0
for (up in unique_paths){
counter <- counter+1
this_pl <- list()
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == up, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == up, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
this_pl[[ctx]] <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Context %d",ctx), x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
)
}
# make multi-panel
pl[[counter]] <- ggarrange(plotlist=this_pl)
annotate_figure(pl[[counter]], top = text_grob(sprintf("Subjects %d to %d", up, up+3), size = title_sz))
}
# and a second multi-panel...
ggarrange(plotlist=pl, nrow = 10, ncol = 2)
# save it
fnl <- file.path(project_path, "fig", paste( paste(version, exp, mes, alg, sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 18, height = 41, limitsize = FALSE)
pl[[19]]
annotate_figure(pl[[counter]], top = text_grob(sprintf("Subjects %d to %d", up, up+3), size = title_sz))
pl[[counter]] <- annotate_figure(pl[[counter]], top = text_grob(sprintf("Subjects %d to %d", up, up+3), size = title_sz))
pl[[counter]]
pl <- list()
counter <- 0
for (up in unique_paths){
counter <- counter+1
this_pl <- list()
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == up, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == up, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
this_pl[[ctx]] <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Context %d",ctx), x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
)
}
# make multi-panel
pl[[counter]] <- ggarrange(plotlist=this_pl)
pl[[counter]] <- annotate_figure(pl[[counter]], top = text_grob(sprintf("Subjects %d to %d", up, up+3), size = title_sz))
}
# and a second multi-panel...
ggarrange(plotlist=pl, nrow = 10, ncol = 2)
# save it
fnl <- file.path(project_path, "fig", paste( paste(version, exp, mes, alg, sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 18, height = 41, limitsize = FALSE)
pl <- list()
for (sub in subs){
sid <- as.numeric(substring(sub,5,7))
# filter to just this subject, session,  context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
obs <- observed %>%
filter(sub == sid, ses == ss, context == ctx, switch == 0)
trials <- unique(obs$t)
obs <- obs %>%
mutate(t_factor = factor(t))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
pl[[sub]] <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
geom_path(
data = obs, aes(x = x, y = y, group = t_factor),
linewidth = 2, linejoin = "mitre", lineend = "butt", position = position_jitter(width = 0.1, height = 0.1),
alpha = 0.1, arrow = arrow(angle = 15, type = "closed"), col = context_colour[ctx]
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
x = "Door Position (x)", y = "Door Position (y)"
) +
theme(
plot.title=element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()
)
pl[[sub]] <- annotate_figure(pl[[sub]], top = text_grob(sprintf("Subject %d",sid)))
}
ggarrange(plotlist = pl, nrow = 18, ncol = 4)
# save it
fnl <- file.path(project_path, "fig", paste(paste(version, exp, names(sess[sess==ss]), mes, alg,
paste("context", ctx,
sep = "-"
), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 8, height = 36, limitsize = FALSE)
ggsave(fnl, plot = last_plot(), width = 16, height = 72, limitsize = FALSE)
pl <- list()
for (sub in subs){
sid <- as.numeric(substring(sub,5,7))
# filter to just this subject, session,  context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
obs <- observed %>%
filter(sub == sid, ses == ss, context == ctx, switch == 0)
trials <- unique(obs$t)
obs <- obs %>%
mutate(t_factor = factor(t))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
pl[[sub]] <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
geom_path(
data = obs, aes(x = x, y = y, group = t_factor),
linewidth = 2, linejoin = "mitre", lineend = "butt", position = position_jitter(width = 0.1, height = 0.1),
alpha = 0.1, arrow = arrow(angle = 15, type = "closed"), col = context_colour[ctx]
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Subject %d",sid)
) +
theme(
plot.title=element_text(title_sz),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()
)
}
ggarrange(plotlist = pl, nrow = 18, ncol = 4)
# save it
fnl <- file.path(project_path, "fig", paste(paste(version, exp, names(sess[sess==ss]), mes, alg,
paste("context", ctx,
sep = "-"
), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 16, height = 72, limitsize = FALSE)
pl[[sub]]
ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
geom_path(
data = obs, aes(x = x, y = y, group = t_factor),
linewidth = 2, linejoin = "mitre", lineend = "butt", position = position_jitter(width = 0.1, height = 0.1),
alpha = 0.1, arrow = arrow(angle = 15, type = "closed"), col = context_colour[ctx]
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Subject %d",sid)
)
warnings()
for (ss in sess){
for (ctx in contexts){
for (alg in algs){
pl <- list()
for (sub in subs){
sid <- as.numeric(substring(sub,5,7))
# filter to just this subject, session,  context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
obs <- observed %>%
filter(sub == sid, ses == ss, context == ctx, switch == 0)
trials <- unique(obs$t)
obs <- obs %>%
mutate(t_factor = factor(t))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
pl[[sub]] <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
geom_path(
data = obs, aes(x = x, y = y, group = t_factor),
linewidth = 2, linejoin = "mitre", lineend = "butt", position = position_jitter(width = 0.1, height = 0.1),
alpha = 0.1, arrow = arrow(angle = 15, type = "closed"), col = context_colour[ctx]
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Subject %d",sid)
) +
theme(
plot.title=element_text(size=title_sz),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()
)
}
ggarrange(plotlist = pl, nrow = 18, ncol = 4)
# save it
fnl <- file.path(project_path, "fig", paste(paste(version, exp, names(sess[sess==ss]), mes, alg,
paste("context", ctx,
sep = "-"
), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 16, height = 72, limitsize = FALSE)
}
}
}
