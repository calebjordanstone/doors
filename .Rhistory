summarise(reclicks = mean(reclicks)) %>%
mutate(sub = factor(sub))
data <- inner_join(data, stereo_data, by="sub")
train_data %>% ggplot(aes(x=shifts, fill=train_type)) +
geom_density(alpha=0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
data %>% ggplot(aes(x=reclicks, fill=train_type)) +
geom_density(alpha = 0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
#data <- data %>% filter(train_type == "block") %>% filter(sub != 9)
data <- data %>% filter(train_type == "space") %>% filter(sub != 8)
var_names <- c("ge","shifts", "reclicks")
mhl.mat <- as.matrix(data %>% select(ge, shifts, reclicks)) # turn the data into a matrix
mhl.cov <- cov(mhl.mat[,var_names]) # get the covariance
mhl.dist <- mahalanobis(mhl.mat[,var_names],
colMeans(mhl.mat[,var_names]), mhl.cov) # get mhl
hist(mhl.dist, breaks = 20, col=wes_palette("IsleofDogs1")[1]) #viz
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1, qchisq(.001, df=length(mhl.dist)-1))
apply(mhl.mat[,var_names], 2, var)
for_collin <- data.frame(mhl.mat[,var_names])
x <- ggpairs(for_collin)
ggpairs(data %>% select(accuracy, shifts, reclicks))
ggpairs(data %>% select(setting_errors, shifts, reclicks))
ggpairs(data %>% select(rt, shifts, reclicks))
#data <- data %>%
#  mutate(ge = scale(ge)[,1],
#         reclicks = scale(reclicks)[,1],
#         shifts = scale(shifts)[,1])
model <- lm(accuracy ~ ge*shifts*reclicks, data=data) #train_type*
print(summary(model))
# some helpful things
library(tidyverse)
library(GGally)
library(lme4)
library(wesanderson)
library(emmeans)
library(reghelper) #simple_slopes
library(interactions) #interact_plot
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
trial_data <- read_csv(file.path(project_path, 'res','exp_ts_trl.csv'), show_col_types = FALSE)
avg_data <- read_csv(file.path(project_path, 'res','exp_ts_avg.csv'), show_col_types = FALSE)
train_data <- trial_data %>%
group_by(sub, ses, train_type) %>%
summarise_all(mean) %>%
ungroup() %>%
filter(ses==2) %>%
select(sub, general_errors, context_changes, train_type) %>%
rename(ge=general_errors, shifts=context_changes) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"block",train_type==1~"space"),
train_type = factor(train_type))
test_data <- avg_data %>%
filter(ses == 3) %>%
group_by(sub, switch) %>%
summarise_all(mean) %>%
select(sub, switch, accuracy, setting_errors, setting_slips, setting_sticks, rt) %>%
mutate(sub = factor(sub),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch)) %>%
pivot_wider(names_from=switch, values_from=c(accuracy, setting_errors, setting_slips, setting_sticks, rt))
data <- inner_join(train_data, test_data, by="sub")
data <- data %>%
mutate(accuracy = accuracy_stay-accuracy_switch,
setting_errors = setting_errors_stay-setting_errors_switch,
rt = rt_stay-rt_switch)
stereo_data <- read_csv(file.path(project_path,"res", "exp_ts_stereotypy.csv"), show_col_types = FALSE)
stereo_data <- stereo_data %>%
select(sub, context, reclicks) %>%
group_by(sub) %>%
summarise(reclicks = mean(reclicks)) %>%
mutate(sub = factor(sub))
data <- inner_join(data, stereo_data, by="sub")
train_data %>% ggplot(aes(x=shifts, fill=train_type)) +
geom_density(alpha=0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
data %>% ggplot(aes(x=reclicks, fill=train_type)) +
geom_density(alpha = 0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
#data <- data %>% filter(train_type == "block") %>% filter(sub != 9)
#data <- data %>% filter(train_type == "space") %>% filter(sub != 8)
var_names <- c("ge","shifts", "reclicks")
mhl.mat <- as.matrix(data %>% select(ge, shifts, reclicks)) # turn the data into a matrix
mhl.cov <- cov(mhl.mat[,var_names]) # get the covariance
mhl.dist <- mahalanobis(mhl.mat[,var_names],
colMeans(mhl.mat[,var_names]), mhl.cov) # get mhl
hist(mhl.dist, breaks = 20, col=wes_palette("IsleofDogs1")[1]) #viz
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1, qchisq(.001, df=length(mhl.dist)-1))
apply(mhl.mat[,var_names], 2, var)
for_collin <- data.frame(mhl.mat[,var_names])
x <- ggpairs(for_collin)
ggpairs(data %>% select(accuracy, shifts, reclicks))
ggpairs(data %>% select(setting_errors, shifts, reclicks))
ggpairs(data %>% select(rt, shifts, reclicks))
#data <- data %>%
#  mutate(ge = scale(ge)[,1],
#         reclicks = scale(reclicks)[,1],
#         shifts = scale(shifts)[,1])
model <- lm(accuracy ~ train_type*ge*shifts*reclicks, data=data)
print(summary(model))
ggpairs(data %>% select(rt, shifts, reclicks)) + facet_wrap(train_type)
ggpairs(data %>% select(rt, shifts, reclicks)) + facet_wrap(vars(train_type))
ggpairs(data %>% select(rt, shifts, reclicks))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.33, .67)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.2, .4)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.2, .8)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(1/3, (1/3)*2)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.1, .9)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.2, .8)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.2, .6)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.05, .6)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.2, .4, .6, .8)))
model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.25, .5, .75)))
# option 1: emmip
emmip(model, train_type ~ reclicks | ge, cov.reduce=function(x) quantile(x, c(.1, .5, .9)))
# option 2: interactions function
interact_plot(
model, pred = reclicks, modx = train_type,
mod2 = ge, mod2.values = quantile(data$ge, c(.1, .5, .9)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
#linearity.check = TRUE,
)
model <- lm(accuracy ~ ge*reclicks, data=data %>% filter(sub != 8) %>% filter(train_type == "space"))
interact_plot(
model, pred = reclicks, modx = ge, modx.values = quantile(data$ge, c(0.25, 0.5, 0.75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
main.title = "Spaced Training"
)
model <- lm(accuracy ~ ge*reclicks, data=data %>% filter(sub != 8) %>% filter(train_type == "block"))
interact_plot(
model, pred = reclicks, modx = ge, modx.values = quantile(data$ge, c(0.25, 0.5, 0.75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
main.title = "Blocked Training"
)
model <- lm(accuracy ~ ge*reclicks, data=data %>% filter(sub != 8) %>% filter(train_type == "space"))
interact_plot(
model, pred = reclicks, modx = ge, modx.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
main.title = "Spaced Training"
)
model <- lm(accuracy ~ ge*reclicks, data=data %>% filter(sub != 9) %>% filter(train_type == "block"))
interact_plot(
model, pred = reclicks, modx = ge, modx.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
main.title = "Blocked Training"
)
model <- lm(setting_errors ~ train_type*ge*shifts*reclicks,data=data)
summary(model)
model <- lm(setting_errors ~ shifts*ge*reclicks, data=data)
lines <- emtrends(model, pairwise ~ shifts | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
model <- lm(setting_errors ~ shifts*ge*reclicks, data=data)
emtrends(model, pairwise ~ shifts | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
interact_plot(
model, pred = reclicks, modx = shifts,
mod2 = ge, mod2.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
model <- lm(rt ~ train_type*ge*shifts*reclicks, data=data)
summary(model)
model <- lm(rt ~ train_type*ge*reclicks, data=data)
lines <- emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
model <- lm(rt ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
interact_plot(
model, pred = reclicks, modx = train_type,
mod2 = ge, mod2.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
model <- lm(setting_sticks_stay-setting_sticks_switch ~ train_type*ge*shifts*reclicks,data=data)
summary(model)
model <- lm(setting_sticks_stay-setting_sticks_switch ~ shifts*ge*reclicks, data=data)
emtrends(model, pairwise ~ shifts | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
interact_plot(
model, pred = reclicks, modx = shifts,
mod2 = ge, mod2.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
model <- lm(setting_slips_stay-setting_slips_switch ~ train_type*ge*shifts*reclicks,data=data)
summary(model)
View(data)
model <- lm(setting_slips_stay-setting_slips_switch ~ train_type*ge*shifts*reclicks,data=data)
summary(model)
model <- lm(setting_slips_stay-setting_slips_switch ~ train_type*shifts*reclicks, data=data)
emtrends(model, pairwise ~ train_type | shifts, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
interact_plot(
model, pred = reclicks, modx = shifts,
mod2 = ge, mod2.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
interact_plot(
model, pred = reclicks, modx = train_type,
mod2 = shifts, mod2.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
ggpairs(data %>% select(rt, ge, train_type, shifts, reclicks))
ggpairs(data %>% select(rt, shifts, reclicks))
#model <- lm(accuracy ~ train_type*ge*shifts*reclicks, data=data)
model <- lm(accuracy ~ train_type * shifts * reclicks, data = data)
print(summary(model))
#model <- lm(setting_errors ~ train_type*ge*shifts*reclicks,data=data)
model <- lm(setting_errors ~ train_type * shifts * reclicks, data = data)
summary(model)
#model <- lm(setting_sticks_stay-setting_sticks_switch ~ train_type*ge*shifts*reclicks,data=data)
model <- lm(setting_sticks_stay-setting_sticks_switch ~ train_type * shifts * reclicks, data = data)
summary(model)
#model <- lm(setting_slips_stay-setting_slips_switch ~ train_type*ge*shifts*reclicks,data=data)
model <- lm(setting_slips_stay-setting_slips_switch ~ train_type*shifts*reclicks, data = data)
summary(model)
#model <- lm(rt ~ train_type*ge*shifts*reclicks, data=data)
model <- lm(rt ~ train_type * shifts * reclicks, data = data)
summary(model)
model <- lm(rt ~ train_type*ge*shifts*reclicks, data=data)
#model <- lm(rt ~ train_type * shifts * reclicks, data = data)
summary(model)
model <- lm(rt ~ train_type*ge*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
# some helpful things
library(tidyverse)
library(GGally)
library(lme4)
library(wesanderson)
library(emmeans)
library(reghelper) #simple_slopes
library(interactions) #interact_plot
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
trial_data <- read_csv(file.path(project_path, 'res','exp_ts_trl.csv'), show_col_types = FALSE)
avg_data <- read_csv(file.path(project_path, 'res','exp_ts_avg.csv'), show_col_types = FALSE)
train_data <- trial_data %>%
group_by(sub, ses, train_type) %>%
summarise_all(mean) %>%
ungroup() %>%
filter(ses==2) %>%
select(sub, general_errors, context_changes, train_type) %>%
rename(ge=general_errors, shifts=context_changes) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"block",train_type==1~"space"),
train_type = factor(train_type))
test_data <- avg_data %>%
filter(ses == 3) %>%
group_by(sub, switch) %>%
summarise_all(mean) %>%
select(sub, switch, accuracy, setting_errors, setting_slips, setting_sticks, rt) %>%
mutate(sub = factor(sub),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch)) %>%
pivot_wider(names_from=switch, values_from=c(accuracy, setting_errors, setting_slips, setting_sticks, rt))
data <- inner_join(train_data, test_data, by="sub")
data <- data %>%
mutate(accuracy = accuracy_switch-accuracy_stay,
setting_errors = setting_errors_switch-setting_errors_stay,
rt = rt_switch-rt_stay,
setting_sticks = setting_sticks_switch-setting_sticks_stay,
setting_slips = setting_slips_switch-setting_slips_stay)
stereo_data <- read_csv(file.path(project_path,"res", "exp_ts_stereotypy.csv"), show_col_types = FALSE)
stereo_data <- stereo_data %>%
select(sub, context, reclicks) %>%
group_by(sub) %>%
summarise(reclicks = mean(reclicks)) %>%
mutate(sub = factor(sub))
data <- inner_join(data, stereo_data, by="sub")
train_data %>% ggplot(aes(x=shifts, fill=train_type)) +
geom_density(alpha=0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
data %>% ggplot(aes(x=reclicks, fill=train_type)) +
geom_density(alpha = 0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
#data <- data %>% filter(train_type == "block") %>% filter(sub != 9)
#data <- data %>% filter(train_type == "space") %>% filter(sub != 8)
var_names <- c("ge","shifts", "reclicks")
mhl.mat <- as.matrix(data %>% select(ge, shifts, reclicks)) # turn the data into a matrix
mhl.cov <- cov(mhl.mat[,var_names]) # get the covariance
mhl.dist <- mahalanobis(mhl.mat[,var_names],
colMeans(mhl.mat[,var_names]), mhl.cov) # get mhl
hist(mhl.dist, breaks = 20, col=wes_palette("IsleofDogs1")[1]) #viz
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1, qchisq(.001, df=length(mhl.dist)-1))
apply(mhl.mat[,var_names], 2, var)
for_collin <- data.frame(mhl.mat[,var_names])
x <- ggpairs(for_collin)
ggpairs(data %>% select(accuracy, shifts, reclicks))
ggpairs(data %>% select(setting_errors, shifts, reclicks))
ggpairs(data %>% select(rt, shifts, reclicks))
ggpairs(data %>% select(setting_sticks, shifts, reclicks))
ggpairs(data %>% select(setting_slips, shifts, reclicks))
# some helpful things
library(tidyverse)
library(GGally)
library(lme4)
library(wesanderson)
library(emmeans)
library(reghelper) #simple_slopes
library(interactions) #interact_plot
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
trial_data <- read_csv(file.path(project_path, 'res','exp_ts_trl.csv'), show_col_types = FALSE)
avg_data <- read_csv(file.path(project_path, 'res','exp_ts_avg.csv'), show_col_types = FALSE)
train_data <- trial_data %>%
group_by(sub, ses, train_type) %>%
summarise_all(mean) %>%
ungroup() %>%
filter(ses==2) %>%
select(sub, general_errors, context_changes, train_type) %>%
rename(ge=general_errors, shifts=context_changes) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"block",train_type==1~"space"),
train_type = factor(train_type))
test_data <- avg_data %>%
filter(ses == 3) %>%
group_by(sub, switch) %>%
summarise_all(mean) %>%
select(sub, switch, accuracy, setting_errors, setting_slips, setting_sticks, rt) %>%
mutate(sub = factor(sub),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch)) %>%
pivot_wider(names_from=switch, values_from=c(accuracy, setting_errors, setting_slips, setting_sticks, rt))
data <- inner_join(train_data, test_data, by="sub")
data <- data %>%
mutate(accuracy = accuracy_switch-accuracy_stay,
setting_errors = setting_errors_switch-setting_errors_stay,
rt = rt_switch-rt_stay,
setting_sticks = setting_sticks_switch-setting_sticks_stay,
setting_slips = setting_slips_switch-setting_slips_stay)
stereo_data <- read_csv(file.path(project_path,"res", "exp_ts_stereotypy.csv"), show_col_types = FALSE)
stereo_data <- stereo_data %>%
select(sub, context, reclicks) %>%
group_by(sub) %>%
summarise(reclicks = mean(reclicks)) %>%
mutate(sub = factor(sub))
data <- inner_join(data, stereo_data, by="sub")
train_data %>% ggplot(aes(x=shifts, fill=train_type)) +
geom_density(alpha=0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
data %>% ggplot(aes(x=reclicks, fill=train_type)) +
geom_density(alpha = 0.7) +
scale_fill_manual(values = wes_palette("IsleofDogs1"))
#data <- data %>% filter(train_type == "block") %>% filter(sub != 9)
#data <- data %>% filter(train_type == "space") %>% filter(sub != 8)
var_names <- c("ge","shifts", "reclicks")
mhl.mat <- as.matrix(data %>% select(ge, shifts, reclicks)) # turn the data into a matrix
mhl.cov <- cov(mhl.mat[,var_names]) # get the covariance
mhl.dist <- mahalanobis(mhl.mat[,var_names],
colMeans(mhl.mat[,var_names]), mhl.cov) # get mhl
hist(mhl.dist, breaks = 20, col=wes_palette("IsleofDogs1")[1]) #viz
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1, qchisq(.001, df=length(mhl.dist)-1))
apply(mhl.mat[,var_names], 2, var)
for_collin <- data.frame(mhl.mat[,var_names])
x <- ggpairs(for_collin)
ggpairs(data %>% select(accuracy, shifts, reclicks))
ggpairs(data %>% select(setting_errors, shifts, reclicks))
ggpairs(data %>% select(rt, shifts, reclicks))
ggpairs(data %>% select(setting_sticks, shifts, reclicks))
ggpairs(data %>% select(setting_slips, shifts, reclicks))
#data <- data %>%
#  mutate(ge = scale(ge)[,1],
#         reclicks = scale(reclicks)[,1],
#         shifts = scale(shifts)[,1])
model <- lm(accuracy ~ train_type * shifts * reclicks, data = data)
print(summary(model))
model <- lm(accuracy ~ train_type*reclicks, data=data)
emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.25, .5, .75)))
## follow up an interaction with multiple covariates
#   via emtrends
#model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
#emtrends(model, pairwise ~ train_type | ge, var = "reclicks", cov.reduce = function(x) quantile(x, c(.25, .5, .75)))
#   or via simple slopes
# https://interactions.jacob-long.com/reference/sim_slopes#ref-examples
#model <- lm(accuracy ~ train_type*ge*reclicks, data=data)
#lines <- simple_slopes(
#  model, pred=reclicks, modx = train_type,
#  mod2 = ge, mod2.values = function(x) quantile(x, c(0.1, 0.5, 0.9))
#)
## view the interaction
#   via emmip
#emmip(model, train_type ~ reclicks | ge, cov.reduce=function(x) quantile(x, c(.1, .5, .9)))
#   or via interactions function (this way you can see whether the model really describes the data)
#interact_plot(
#  model, pred = reclicks, modx = train_type,
#  mod2 = ge, mod2.values = quantile(data$ge, c(.1, .5, .9)),
#  interval = TRUE, #95% CI by default
#  plot.points = TRUE,
#  #linearity.check = TRUE,
#)
model <- lm(setting_errors ~ train_type*shifts*reclicks,data=data)
summary(model)
model <- lm(setting_sticks_switch ~ train_type*ge*shifts*reclicks,data=data)
summary(model)
model <- lm(setting_slips_stay-setting_slips_switch ~ train_type*shifts*reclicks, data = data)
summary(model)
model <- lm(setting_slips ~ train_type*shifts*reclicks, data = data)
summary(model)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
emtrends(model, pairwise ~ train_type | shifts, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
emmeans(model, c("shifts", "reclicks"))
model <- lm(setting_slips ~ shifts*reclicks, data=data)
emmeans(model, c("shifts", "reclicks"))
emtrends(model, pairwise ~ shifts, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
emtrends(model, pairwise ~ shifts, var = "reclicks")
emtrends(model, pairwise ~ | shifts, var = "reclicks")
emtrends(model, pairwise ~ shifts, var = "reclicks", cov.reduce = function(x) mean())
emtrends(model, pairwise ~ shifts, var = "reclicks", cov.reduce = function(x) mean(x))
emtrends(model, pairwise ~ shifts, var = "reclicks")
emmeans(model, c("shifts", "reclicks"))
emtrends(model, pairwise ~ shifts, var = "reclicks")
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(model, pred = reclicks, modx = shifts)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(model, pred = reclicks, modx = shifts)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, johnson_neyman = FALSE)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, modx.values = function(x) quantiles(.1, .5, .9), johnson_neyman = FALSE)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, modx.values = function(x) quantiles(x, c(.1, .5, .9)), johnson_neyman = FALSE)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, modx.values = function(x) quantile(x, c(.1, .5, .9)), johnson_neyman = FALSE)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, modx.values = quantile(shifts, c(.1, .5, .9)), johnson_neyman = FALSE)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, modx.values = quantile(data$shifts, c(.1, .5, .9)), johnson_neyman = FALSE)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
modx.values = quantile(data$shifts, c(.1, .5, .9)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, modx.values = quantile(data$shifts, c(.1, .5, .9)), johnson_neyman = FALSE)
model <- lm(setting_slips ~ shifts*reclicks, data=data)
interact_plot(
model, pred = reclicks, modx = shifts,
modx.values = quantile(data$shifts, c(.1, .5, .9)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
sim_slopes(model, pred = reclicks, modx = shifts, modx.values = quantile(data$shifts, c(.1, .5, .9)), johnson_neyman = TRUE)
model <- lm(rt ~ train_type*shifts*reclicks, data=data)
summary(model)
model <- lm(rt ~ train_type*shifts*reclicks, data=data)
emtrends(model, pairwise ~ train_type | shifts, var = "reclicks", cov.reduce = function(x) quantile(x, c(0.25, .5, .75)))
interact_plot(
model, pred = reclicks, modx = train_type,
mod2 = shifts, mod2.values = quantile(data$ge, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
interact_plot(
model, pred = reclicks, modx = train_type,
mod2 = shifts, mod2.values = quantile(data$shifts, c(.25, .5, .75)),
interval = TRUE, #95% CI by default
plot.points = TRUE,
)
