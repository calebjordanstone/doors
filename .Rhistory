offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
) %>% select(!n_clicks:n_correct)
fnl <- file.path(project_path,'res',paste(paste(version,exp,ses,mes,'trl',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
View(res)
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240325"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,ses,mes,'avg',sep='_'),'.csv',sep = ""))
results <- read.csv(fnl)
results <- results %>% mutate(cond = case_when(cond==0~"Low Switch",cond==1~"High Switch")) %>% mutate(cond = as.character(cond))
View(results)
results <- read.csv(fnl)
results <- results %>% mutate(cond = case_when(cond==0~"Low Switch",cond==1~"High Switch")) %>% mutate(group = as.character(group))
results %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=group,y=accuracy,shape=cond,color=cond),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=group,y=accuracy,shape=cond,color=cond),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=group,y=accuracy,color=cond),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
View(res)
source("~/Documents/academe/projects/doors/src/get_data.R")
View(res)
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
View(res)
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
View(res)
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
View(data)
x <- data[[1]]
View(x)
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
x <- data[[1]]
View(x)
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
x <- data[[1]]
View(x)
res <- grp_data %>% group_by(sub,group,t) %>% summarise(
cond = max(cond),
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
View(res)
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
x <- data[[1]]
View(x)
res <- grp_data %>% group_by(sub,group,t) %>% summarise(
cond = max(cond),
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
View(res)
res <- grp_data %>% group_by(sub,group,t) %>% summarise(
cond = cond[1],
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
res <- grp_data %>% group_by(sub,group,t) %>% summarise(
cond = mean(cond),
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = numeric(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
res <- grp_data %>% group_by(sub,group,t) %>% summarise(
cond = mean(cond),
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
res <- grp_data %>% group_by(sub,group,t) %>% summarise(
cond = max(cond),
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
)
source("~/Documents/academe/projects/doors/src/run_analysis.R")
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240325"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,ses,mes,'avg',sep='_'),'.csv',sep = ""))
results <- read.csv(fnl)
results <- results %>% mutate(cond = case_when(cond==0~"Low Switch",cond==1~"High Switch")) %>% mutate(group = as.character(group))
results %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=group,y=accuracy,shape=cond,color=cond),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=group,y=accuracy,shape=cond,color=cond),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=group,y=accuracy,color=cond),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
renv::status()
?renv::status
renv::load()
renv::restore()
source("~/Documents/academe/projects/doors/src/make_figs.R", echo=TRUE)
renv::snapshot()
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
source("~/Documents/academe/projects/doors/src/make_figs.R")
if(saving){
fnl <- file.path(project_path,'fig',paste(paste(version,exp,ses,mes,'avg',sep='_'),'.pdf',sep = ""))
ggsave(fnl,plot = last_plot())
}
source("~/Documents/academe/projects/doors/src/make_figs.R")
renv::snapshot()
