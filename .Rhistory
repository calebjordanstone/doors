if (sr$sr[[1]] > 0.2) {
train_type <- 2 # high switch rate (30%, but will be nearer 0.296875)
} else {
train_type <- 1 # low switch rate
}
}
clicks <- clicks %>%
mutate(train_type = c(kronecker(matrix(1, nrow(clicks), 1), train_type)))
hovers <- hovers %>%
mutate(train_type = c(kronecker(matrix(1, nrow(hovers), 1), train_type)))
transfer = c(kronecker(matrix(1, nrow(clicks), 1), NA)
matrix(1, nrow(clicks), 1)
x <- matrix(1, nrow(clicks), 1)
View(x)
y <- kronecker(x,NA)
View(y)
z <- c(y)
# lydia barnes, july 2024
# example of how to plot repeated measurements as scatter joined by lines
library(tidyverse)
# get some example data from the "iris" dataset
data(iris)
# re-label the conditions, so we have 2 groups of 2 (flower_segment = "Sepal", "Petal"; orientation = "Width", "Length")
iris <- iris %>%
mutate(flower = c(1:nrow(iris))) %>%
filter(Species != "setosa") %>%
pivot_longer(cols = Sepal.Length:Petal.Width, names_to = "measurement_type",values_to = "mm") %>%
mutate(flower_segment = case_when(measurement_type == "Sepal.Width" ~ 1, measurement_type == "Sepal.Length" ~ 1, .default = 0)) %>%
mutate(orientation = factor(case_when(measurement_type == "Sepal.Width" ~ 1, measurement_type == "Petal.Width" ~ 1, .default = 0)))
# get some summary statistics
res <- iris %>%
group_by(measurement_type) %>%
summarise(mean = mean(mm),
sd = sd(mm))
#plot!
ggplot() +
geom_line(data = iris,
aes(x = flower_segment, y = mm, group = (interaction(flower,orientation))), color = "grey",
) +
geom_point(data = iris, aes(x = flower_segment, y = mm, color = orientation, group = flower_segment),
alpha = 0.6, size = 2.5,
position = position_jitterdodge(jitter.width = 0.2, jitter.height = 0)
) +
geom_errorbar(
aes(x = c(0,0,1,1),
ymin = res$mean - 1.96 * (res$sd / sqrt(length(unique(iris$flower)))),
ymax = res$mean + 1.96 * (res$sd / sqrt(length(unique(iris$flower)))),
width = 0.1)
) +
theme_minimal() +
labs(title = "Iris Sizes",
x = "Flower Segment",
y = "Size (mm)"
) +
scale_color_manual(values = c("0" = "orange", "1" = "blue"),
labels = c("Width", "Length")) +
scale_x_continuous(breaks = c(0,1),
labels = c("Sepal","Petal"))
# lydia barnes, july 2024
# example of how to plot repeated measurements as scatter joined by lines
library(tidyverse)
# get some example data from the "iris" dataset
data(iris)
# re-label the conditions, so we have 2 groups of 2 (flower_segment = "Sepal", "Petal"; orientation = "Width", "Length")
iris <- iris %>%
mutate(flower = c(1:nrow(iris))) %>%
filter(Species != "setosa") %>%
pivot_longer(cols = Sepal.Length:Petal.Width, names_to = "measurement_type",values_to = "mm") %>%
mutate(flower_segment = case_when(measurement_type == "Sepal.Width" ~ 1, measurement_type == "Sepal.Length" ~ 1, .default = 0)) %>%
mutate(orientation = factor(case_when(measurement_type == "Sepal.Width" ~ 1, measurement_type == "Petal.Width" ~ 1, .default = 0)))
# get some summary statistics
res <- iris %>%
group_by(measurement_type) %>%
summarise(mean = mean(mm),
sd = sd(mm))
#plot!
ggplot() +
geom_line(data = iris,
aes(x = flower_segment, y = mm, group = (interaction(flower,orientation))), color = "grey",
) +
geom_point(data = iris, aes(x = flower_segment, y = mm, color = orientation, group = flower_segment),
alpha = 0.6, size = 2.5,
position = position_jitterdodge(jitter.width = 0.2, jitter.height = 0)
) +
geom_errorbar(
aes(x = c(0,0,1,1),
ymin = res$mean - 1.96 * (res$sd / sqrt(length(unique(iris$flower)))),
ymax = res$mean + 1.96 * (res$sd / sqrt(length(unique(iris$flower)))),
width = 0.1)
) +
theme_minimal() +
labs(title = "Iris Sizes",
x = "Flower Segment",
y = "Size (mm)",
color = "Orientation",
) +
scale_color_manual(values = c("0" = "orange", "1" = "blue"),
labels = c("Width", "Length")) +
scale_x_continuous(breaks = c(0,1),
labels = c("Sepal","Petal"))
# lydia barnes, march 2024
# generates figures from 'doors' project RT and accuracy outputs
### sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "study-01"
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-train" # session: 'ses-learn','ses-train','ses-test'
mes <- "clicks" # measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
### plot the data!
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>%
mutate(switch = case_when(switch == 0 ~ "Stay", switch == 1 ~ "Switch")) %>%
mutate(train_type = as.character(train_type))
if (ses == "ses-learn") {
res <- res %>%
filter(ses == 1)
} else if (ses == "ses-train") {
res <- res %>%
filter(ses == 2)
} else if (ses == "ses-test") {
res <- res %>%
filter(ses == 3)
}
if (ses == "ses-learn") {
# don't split learning phase data by training type, as that's irrelevant
res <- res %>%
mutate(context = case_when(context == 1 ~ "Context A", context == 2 ~ "Context B"))
res <- res %>%
filter(switch != "Switch") # drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
geom_jitter(aes(x = context, y = accuracy), alpha = 0.5, size = mk_sz) +
stat_summary(
aes(
x = context,
y = accuracy
),
fun.data = "mean_cl_normal", geom = "pointrange", linewidth = 2, size = mk_sz / 2,
alpha = 1
) +
stat_summary(aes(x = context, y = accuracy),
fun = "mean", geom = "line", linewidth = 1,
alpha = 1
) +
theme_minimal() +
scale_x_discrete(labels = c("Context A", "Context B")) +
labs(
title = "",
x = "Context", y = "Accuracy (%)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
} else {
res %>%
ggplot() +
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
geom_jitter(aes(x = train_type, y = accuracy, shape = switch, color = switch), position = position_jitterdodge(
dodge.width = 0.3,
jitter.width = 0.1
), alpha = 0.5, size = mk_sz) +
stat_summary(
aes(
x = train_type, y = accuracy,
shape = switch, color = switch
),
fun.data = "mean_cl_normal", geom = "pointrange", position = position_dodge(width = 0.3),
linewidth = 2, size = mk_sz / 2, alpha = 1
) +
stat_summary(aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.3), linewidth = 1, alpha = 1
) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Stay", "Switch")) +
scale_color_lancet(guide = "none") +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
### sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "study-01"
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-train" # session: 'ses-learn','ses-train','ses-test'
mes <- "clicks" # measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
View(res)
View(res)
res <- res %>%
mutate(switch = case_when(switch == 0 ~ "Stay", switch == 1 ~ "Switch")) %>%
mutate(train_type = as.character(train_type))
ses <- "ses-learn" # session: 'ses-learn','ses-train','ses-test'
if (ses == "ses-learn") {
res <- res %>%
filter(ses == 1)
} else if (ses == "ses-train") {
res <- res %>%
filter(ses == 2)
} else if (ses == "ses-test") {
res <- res %>%
filter(ses == 3)
}
res <- res %>%
mutate(context = case_when(context == 1 ~ "Context A", context == 2 ~ "Context B"))
res <- res %>%
filter(switch != "Switch") # drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
geom_jitter(aes(x = context, y = accuracy), alpha = 0.5, size = mk_sz) +
stat_summary(
aes(
x = context,
y = accuracy
),
fun.data = "mean_cl_normal", geom = "pointrange", linewidth = 2, size = mk_sz / 2,
alpha = 1
) +
stat_summary(aes(x = context, y = accuracy),
fun = "mean", geom = "line", linewidth = 1,
alpha = 1
) +
theme_minimal() +
scale_x_discrete(labels = c("Context A", "Context B")) +
labs(
title = "",
x = "Context", y = "Accuracy (%)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
### sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "study-01"
exp <- "exp_lt" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-train" # session: 'ses-learn','ses-train','ses-test'
mes <- "clicks" # measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
### plot the data!
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>%
mutate(switch = case_when(switch == 0 ~ "Stay", switch == 1 ~ "Switch")) %>%
mutate(train_type = as.character(train_type))
if (ses == "ses-learn") {
res <- res %>%
filter(ses == 1)
} else if (ses == "ses-train") {
res <- res %>%
filter(ses == 2)
} else if (ses == "ses-test") {
res <- res %>%
filter(ses == 3)
}
View(res)
# for train and test phases, group by training type (low switch or high switch) and trial type (switch or stay)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_jitter(aes(x = train_type, y = accuracy, shape = switch, color = switch),
position = position_jitterdodge(dodge.width = 0.3, jitter.width = 0.1),
alpha = 0.5, size = mk_sz) +
# add a 95% confidence interval
stat_summary(
aes(
x = train_type, y = accuracy,
shape = switch, color = switch
),
fun.data = "mean_cl_normal", geom = "pointrange", position = position_dodge(width = 0.3),
linewidth = 2, size = mk_sz / 2, alpha = 1
) +
# add a mean
stat_summary(aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.3), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Stay", "Switch")) +
scale_color_lancet(guide = "none") +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
# for train and test phases, group by training type (low switch or high switch) and trial type (switch or stay)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, shape = switch, color = switch),
position = position_jitterdodge(dodge.width = 0.3, jitter.width = 0.1),
alpha = 0.5, size = mk_sz) +
# add a 95% confidence interval
stat_summary(
aes(
x = train_type, y = accuracy,
shape = switch, color = switch
),
fun.data = "mean_cl_normal", geom = "pointrange", position = position_dodge(width = 0.3),
linewidth = 2, size = mk_sz / 2, alpha = 1
) +
# add a mean
stat_summary(aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.3), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Stay", "Switch")) +
scale_color_lancet(guide = "none") +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.3), linewidth = 1, alpha = 1
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3), linewidth = 2, size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.3), linewidth = 2, alpha = 1
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .5), linewidth = 2, size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.5), linewidth = 2, alpha = 1
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 2, size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 2, alpha = 1
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch Condition",
labels = c("Stay", "Switch"),
guide = "none") +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch Condition",
labels = c("Stay", "Switch")) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot() +
# show the chance level
geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = accuracy, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
# add a mean
stat_summary(
aes(x = train_type, y = accuracy, color = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Trial Type",
labels = c("Stay", "Switch")) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
