tmp[[i]] <- resps %>% filter(context==i) %>%
mutate(door_cc = case_when(door %in% filter(doors,context==i)$door~1,.default=0)) %>%
mutate(door_oc = case_when((!(door %in% filter(doors,context==i)$door) & door %in% doors$door)~1,.default=0))
}
resps <- rbind(tmp[[1]],tmp[[2]]) %>% arrange(t)
resps <- resps %>% select(!c(onset,door_p:y)) #remove unnecessary variables
clicks <- resps %>% filter(open_d == 1) %>% select(!open_d) #find click events
hovers <- resps %>% filter(open_d == 9) %>% select(!open_d) %>% mutate(door_correct = door_cc)
clicks <- clicks %>% mutate(switch = c(0,case_when(diff(context) !=0 ~ 1,.default=0)))
hovers <- hovers %>% mutate(switch = c(0,case_when(diff(context) !=0 ~ 1,.default=0)))
if(ses == 'ses-learn'){ # leave the training type variable empty (NA)
clicks <- clicks %>% mutate(train_type = c(kronecker(matrix(1,nrow(clicks),1),train_type)))
hovers <- hovers %>% mutate(train_type = c(kronecker(matrix(1,nrow(hovers),1),train_type)))
}else if(ses == 'ses-train'){# calculate the switch rate
sr <- clicks %>% summarise(sr = mean(switch))
if(sr$sr[[1]]<.05){ #low switch rate
clicks <- clicks %>% mutate(train_type = c(kronecker(matrix(1,nrow(clicks),1),1)))
hovers <- hovers %>% mutate(train_type = c(kronecker(matrix(1,nrow(hovers),1),1)))
}else{
clicks <- clicks %>% mutate(train_type = c(kronecker(matrix(1,nrow(clicks),1),2)))
hovers <- hovers %>% mutate(train_type = c(kronecker(matrix(1,nrow(hovers),1),2)))
}
}else{# use the switch rate we calculated from their training data
clicks <- clicks %>% mutate(train_type = c(kronecker(matrix(1,nrow(clicks),1),train_type$train_type[[1]])))
hovers <- hovers %>% mutate(train_type = c(kronecker(matrix(1,nrow(hovers),1),train_type$train_type[[1]])))
}
View(sr)
View(clicks)
sr <- clicks %>% group_by(t) %>% summarise(sr = mean(switch))
View(sr)
switch <- clicks$switch %>% group_by(t)
sr <- clicks %>% group_by(t) %>% summarise(sr = max(switch))
sr <- clicks %>% group_by(t) %>% summarise(sr = max(switch)) %>% ungroup() %>% summarise(sr = mean(sr))
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# remove redundancy bw door_correct and door_cc
# save full click and hover data as well as trial- and subject-grouped results
# discuss: rt to first correct click onset, or offset?
# produce alternate results grouped by door identity instead of nclicks
# add functionality to track stereotypy
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit/pilot-data'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-learn','ses-train') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240409' #pilot: 20240325 (train and test), 20240409 (D&E learn and train)
apply_threshold <- FALSE #only retain events that lasted more than a given duration?
min_dur <- 0.1 #minimum duration
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
door = integer(),
door_correct = integer(),
on = numeric(),
off = numeric(),
door_cc = integer(),
door_oc = integer(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
train_type <- NA
if(ses == 'ses-test'){
train_type <- grp_data %>% filter(sub == sub & ses == 2) %>% select(train_type)
}
data <- get_data(data_path,exp,sub,ses,train_type,apply_threshold,min_dur)
grp_data <- rbind(grp_data,data[[idx]])
}
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,ses,t,context,train_type) %>% summarise(
switch = max(switch),
n_clicks = n(),
n_correct = sum(door_correct),
n_cc = sum(door_cc),
n_oc = sum(door_oc),
accuracy = n_correct/n_clicks,
)
rt <- grp_data %>% group_by(sub,ses,t,context,train_type) %>% filter(door_correct==1) %>% summarise(rt = min(off)) #time to first correct click offset
res$rt <- rt$rt
fnl <- file.path(project_path,'res',paste(paste(version,exp,mes,'trl',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
setwd('/Users/lydiabarnes/Documents/academe/projects/doors')
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# remove redundancy bw door_correct and door_cc
# save full click and hover data as well as trial- and subject-grouped results
# discuss: rt to first correct click onset, or offset?
# produce alternate results grouped by door identity instead of nclicks
# add functionality to track stereotypy
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit/pilot-data'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-learn','ses-train') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240409' #pilot: 20240325 (train and test), 20240409 (D&E learn and train)
apply_threshold <- FALSE #only retain events that lasted more than a given duration?
min_dur <- 0.1 #minimum duration
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
door = integer(),
door_correct = integer(),
on = numeric(),
off = numeric(),
door_cc = integer(),
door_oc = integer(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
train_type <- NA
if(ses == 'ses-test'){
train_type <- grp_data %>% filter(sub == sub & ses == 2) %>% select(train_type)
}
data <- get_data(data_path,exp,sub,ses,train_type,apply_threshold,min_dur)
grp_data <- rbind(grp_data,data[[idx]])
}
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,ses,t,context,train_type) %>% summarise(
switch = max(switch),
n_clicks = n(),
n_correct = sum(door_correct),
n_cc = sum(door_cc),
n_oc = sum(door_oc),
accuracy = n_correct/n_clicks,
)
rt <- grp_data %>% group_by(sub,ses,t,context,train_type) %>% filter(door_correct==1) %>% summarise(rt = min(off)) #time to first correct click offset
res$rt <- rt$rt
fnl <- file.path(project_path,'res',paste(paste(version,exp,mes,'trl',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
#   by subject
res <- res %>% group_by(sub,ses,context,switch,train_type) %>% summarise(
n_clicks = mean(n_clicks),
n_cc = mean(n_cc),
n_oc = mean(n_oc),
rt = mean(rt),
accuracy = mean(accuracy)
)
fnl <- file.path(project_path,'res',paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
View(res)
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240409"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-learn' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
View(res)
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
View(res)
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_continuous(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res <- res %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res <- res %>% mutate(context = case_when(context==0~"Context 1",context==1~"Context 2"))
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context 1",context==2~"Context 2"))
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context 1",context==2~"Context 2"))
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240409"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-learn' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .2),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=rt),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=rt),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=rt),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240409"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
if(ses == 'ses-learn'){ #don't split learning phase data by training type, as that's irrelevant
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}else{
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}
fnl <- file.path(project_path,'fig',paste(paste(version,exp,ses,mes,'avg',sep='_'),'.pdf',sep = ""))
ggsave(fnl,plot = last_plot())
View(res)
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240409"
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Stay",switch==1~"Switch")) %>% mutate(train_type = as.character(train_type))
if(ses == 'ses-learn'){res <- res %>% filter(ses==1)}else if(ses == 'ses-train'){res <- res %>% filter(ses==2)}else if(ses=='ses-test'){res <- res %>% filter(ses==3)}
if(ses == 'ses-learn'){ #don't split learning phase data by training type, as that's irrelevant
res <- res %>% mutate(context = case_when(context==1~"Context A",context==2~"Context B"))
res <- res %>% filter(switch != 'Switch') #drop that one switch trial during the learn phase, as it could skew results
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=context,y=accuracy),alpha = .5,size = mk_sz) +
stat_summary(aes(x=context,y=accuracy),fun.data = "mean_cl_normal",geom = "pointrange",linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=context,y=accuracy),fun = "mean",geom = "line",linewidth = 1,alpha = 1) +
theme_minimal() +
scale_x_discrete(labels = c("Context A","Context B")) +
labs(title = "", x = "Context", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}else{
res %>%
ggplot() +
geom_hline(yintercept=0.25,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Stay","Switch")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
}
fnl <- file.path(project_path,'fig',paste(paste(version,exp,ses,mes,'avg',sep='_'),'.pdf',sep = ""))
ggsave(fnl,plot = last_plot())
