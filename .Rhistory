# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 9, height = 20, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 5
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 7, height = 20, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 5
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = .5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 7, height = 21, limitsize = FALSE)
warnings()
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 10
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 10
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
# lydia barnes, march 2024
# generates figures from 'doors' project RT and accuracy outputs
# NB: you will need to filter out switch trials whenever you're not looking at switch effects
### sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
### plot the data!
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>%
mutate(switch = case_when(switch == 0 ~ "Stay", switch == 1 ~ "Switch")) %>%
mutate(train_type = as.character(train_type)) %>%
mutate(transfer_sequence = case_when(full_transfer_first == 0 ~ "Partial-Full", full_transfer_first == 1 ~ "Full-Partial", .default = NA)) %>%
mutate(transfer = case_when(transfer == 1 ~ "Full", transfer == 2 ~ "Partial", .default = NA))
View(res)
# for train and test phases, group by training type (low / high switch) and trial type (switch / stay)
res %>% filter(ses==3) %>%
ggplot() +
# show the chance level
#geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_sticks, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = transfer),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
# and a mean
stat_summary(
aes(x = train_type, y = accuracy, color = transfer),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Transfer Type",
labels = c("Non-Switch", "Switch")) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Group", y = "First-Click Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>% filter(ses==3) %>%
ggplot() +
# show the chance level
#geom_hline(yintercept = 0.25, linetype = "solid", linewidth = 1, alpha = 1, color = "black") +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_sticks, color = switch)) +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, color = transfer),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
# and a mean
stat_summary(
aes(x = train_type, y = accuracy, color = transfer),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
#labels = c("Non-Switch", "Switch")
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Group", y = "First-Click Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
# for train and test phases, group by training type (low / high switch) and trial type (switch / stay)
res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_sticks, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_sticks, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_sticks, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Group", y = "First-Click Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
# for train and test phases, group by training type (low / high switch) and trial type (switch / stay)
pl=list()
pl[[1]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_sticks, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_sticks, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_sticks, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Start-of-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
pl[[2]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_slips, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_slips, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_slips, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Mid-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
ggarrange(plotlist=pl,nrow=1,ncol=2)
library(ggpubr)
# for train and test phases, group by training type (low / high switch) and trial type (switch / stay)
pl=list()
pl[[1]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_sticks, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_sticks, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_sticks, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Start-of-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
pl[[2]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_slips, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_slips, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_slips, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Mid-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
ggarrange(plotlist=pl,nrow=1,ncol=2)
# for train and test phases, group by training type (low / high switch) and trial type (switch / stay)
pl=list()
pl[[1]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_sticks, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_sticks, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_sticks, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
guides(colour=FALSE) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Start-of-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
pl[[2]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_slips, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_slips, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_slips, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Mid-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
ggarrange(plotlist=pl,nrow=1,ncol=2)
# lydia barnes, march 2024
# generates figures from 'doors' project RT and accuracy outputs
# NB: you will need to filter out switch trials whenever you're not looking at switch effects
### sources
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
# essentials
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
### plot the data!
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>%
mutate(switch = case_when(switch == 0 ~ "Stay", switch == 1 ~ "Switch")) %>%
mutate(train_type = as.character(train_type)) %>%
mutate(transfer_sequence = case_when(full_transfer_first == 0 ~ "Partial-Full", full_transfer_first == 1 ~ "Full-Partial", .default = NA)) %>%
mutate(transfer = case_when(transfer == 1 ~ "Full", transfer == 2 ~ "Partial", .default = NA))
# for train and test phases, group by training type (low / high switch) and trial type (switch / stay)
pl=list()
pl[[1]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_sticks, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_sticks, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_sticks, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Start-of-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
pl[[2]] <- res %>% filter(ses==3) %>%
ggplot() +
# show each person's score by training type (low switch/high switch) and trial type (switch/stay)
geom_violin(aes(x = train_type, y = setting_slips, colour = switch)) +
stat_summary(
aes(x = train_type, y = setting_slips, color = switch),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(
aes(x = train_type, y = setting_slips, colour = switch),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Switch",
) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "Mid-Trial Errors", x = "Training Group", y = "Setting Errors") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
ggarrange(plotlist=pl,nrow=1,ncol=2)
fnl <- file.path(project_path, "fig", paste(paste(exp, ses, "sticks-and-slips", sep = "_"), ".pdf",sep = ""))
fnl <- file.path(project_path, "fig", paste(paste(exp, "sticks-and-slips", sep = "_"), ".pdf",sep = ""))
ggsave(fnl, plot = last_plot(),width = 24, height = 18, limitsize = FALSE)
ggsave(fnl, plot = last_plot(),width = 15, height = 10, limitsize = FALSE)
ggsave(fnl, plot = last_plot(),width = 15, height = 8, limitsize = FALSE)
