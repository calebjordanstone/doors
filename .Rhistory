}
}
counts <- matrix(0,length(routines))
click <- 1
while (click < nrow(clicks)-4){
print("")
print(click)
# find the clicks that land on the top left door
if(clicks$door_id[click]==1){
cat(".")
# store information about that click
sample <- clicks[click,]
# hunt for the next three UNIQUE clicks
idx <- click
while(nrow(sample)<4){
if(is.na(match(clicks$door_id[idx],sample$door_id))){
sample <- rbind(sample,clicks[idx,])
}else if (idx == nrow(clicks)){
break
}
idx <- idx+1
}
click <- idx
# compare to the six possible routines
routine <- which(sapply(routines, function(x,y) all(x==y) , y=sample$door_id))
counts[routine] <- counts[routine]+1
}else{
click <- click+1
}
}
View(counts)
source(file.path("src-dirich", "count_paths.R"))
source(file.path("src-dirich", "make_dirichlet.R"))
counts <- count_paths(clicks)
rm(list=ls())
###### some helpful things
library(withr)
library(rstan) # installation guide here - https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
library(brms) # use regular install.packages()
library(tidybayes)
library(wesanderson)
library(tidyverse)
source(file.path("src-dirich", "count_paths.R"))
source(file.path("src-dirich", "make_dirichlet.R"))
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
fnl <- file.path(project_path, "res", paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
data <- read.csv(fnl)
sid <- 1
ctx <- 1
clicks <- data %>% filter(sub==sid,ses==2,context==ctx,door_cc==1,switch==0)
counts <- count_paths(clicks)
library(withr)
library(rstan) # installation guide here - https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
library(brms) # use regular install.packages()
library(tidybayes)
library(wesanderson)
n_routines = 6 # there are 6 possible routines
alpha_k <- rep(n_routines, times=n_routines) # shape parameter, like the beta,
alpha_k <- c(10, 1, 1, 1, 1, 1)
# here our prior says that each route is likely to happen 1/6 of the time
# aka I am generating data under the null hypothesis
n_observations <- 160 # assuming the total counts is 160
length(counts)
counts$r <- paste("r", 1:length(counts), sep="")
counts
View(counts)
counts <- matrix(0,length(routines))
counts
counts <- matrix(0,length(routines))
counts <- matrix(0,6)
counts
rownames(counts)
rownames(counts) = c("r1","r2","r3","r4","r5","r6")
counts
x <- data.frame(counts)
x
x$counts
rm(list=ls())
library(tidyverse)
source(file.path("src-dirich", "count_paths.R"))
source(file.path("src-dirich", "make_dirichlet.R"))
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
fnl <- file.path(project_path, "res", paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
data <- read.csv(fnl)
# -------------------------------------------------------------------------
# loop through participants and contexts
sid <- 1
ctx <- 1
clicks <- data %>% filter(sub==sid,ses==2,context==ctx,door_cc==1,switch==0)
counts <- count_paths(clicks)
counts
library(withr)
library(rstan) # installation guide here - https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
library(brms) # use regular install.packages()
library(tidybayes)
library(wesanderson)
## step 1. use a dirichlet distribution to pick from the six possible routines
## at chance
n_routines = 6 # there are 6 possible routines
alpha_k <- rep(n_routines, times=n_routines) # shape parameter, like the beta,
alpha_k <- c(10, 1, 1, 1, 1, 1)
# here our prior says that each route is likely to happen 1/6 of the time
# aka I am generating data under the null hypothesis
n_observations <- 160 # assuming the total counts is 160
# distribution counts, but for each possible routine
dir_prior <- 1 # uniform prior (note this is the prior we'll use
# for modelling the data)
counts <- counts %>% mutate(posterior_alphas = counts + dir_prior)
with_seed(42, {
rdirichlet(n = 1e5, alpha = counts$posterior_alphas) |>
data.frame() |>
set_names(paste("α", 1:6, sep="")) |>
pivot_longer(everything(), values_to="p", names_to="alpha") |>
ggplot(aes(x = p, fill = alpha)) +
geom_density(bounds = c(0, 1), color = NA) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), guide = "none") +
labs(x = "P") +
facet_wrap(vars(alpha))
})
dir_prior
posterior_alphas
counts
null_hyp <- rep(1/n_routines, times=n_routines)
null_llike <- ddirichlet(null_hyp, alpha=counts$posterior_alphas, log=TRUE)
# log likelihood of the null, save for each participant for future calcs,
# as I have had an idea for a second level stat that I think is better than
# the binomial idea we chatted about
exp_theta <- counts$posterior_alphas/sum(counts$posterior_alphas)
# exp value of thetas (given observations) # as above
exp_llike <- ddirichlet(exp_theta, alpha=counts$posterior_alphas, log=TRUE)
lBF <- exp_llike - null_llike # this is the BF in log p form
BF <- exp(lBF) # this is our bayes factor
hyp_dat <- with_seed(42, {
rdirichlet(n = 1e5, alpha = counts$posterior_alphas) |>
data.frame() |>
set_names(paste("α", 1:6, sep="")) |>
pivot_longer(everything(), values_to="p", names_to="alpha") |>
group_by(alpha) |>
summarise(prob = mean(p <= 1/n_routines))
})
View(hyp_dat)
dir_entropy <- function(alphas){
# see definition at https://en.wikipedia.org/wiki/Dirichlet_distribution
alpha0 <- sum(alphas)
K <- length(alphas)
log_beta_alpha <- sum(lgamma(alphas)) - lgamma(alpha0)
log_beta_alpha + (alpha0 - K)*digamma(alpha0) - sum((alphas-1)*digamma(alphas))
}
with(counts, dir_entropy(posterior_alphas))
null_hyp
null_llike
exp_theta
exp_llike
lBF
BF
counts
with(counts, dir_entropy(posterior_alphas))
entropy <- with(counts, dir_entropy(posterior_alphas))
routineness <- data.frame(null_hyp,null_llike)
View(routineness)
routineness <- data.frame(null_llike,exp_llike,BF)
View(routineness)
hyp_dat
for (ctx in unique(data$context)){
# get their train phase data, context-correct stay trial clicks only
clicks <- data %>% filter(sub==sid,ses==2,context==ctx,door_cc==1,switch==0)
counts <- count_paths(clicks)
tmp <- make_dirichlet(counts)
routineness <- rbind(routineness,cbind(sub==sid,context==ctx,tmp))
}
routineness <- data.frame()
source(file.path("src-dirich", "count_paths.R"))
source(file.path("src-dirich", "make_dirichlet.R"))
for (ctx in unique(data$context)){
# get their train phase data, context-correct stay trial clicks only
clicks <- data %>% filter(sub==sid,ses==2,context==ctx,door_cc==1,switch==0)
counts <- count_paths(clicks)
tmp <- make_dirichlet(counts)
routineness <- rbind(routineness,cbind(sub=sid,context=ctx,tmp))
}
View(routineness)
# loop through participants and contexts
routineness <- data.frame()
for (sid in unique(data$sub)){
for (ctx in unique(data$context)){
# get their train phase data, context-correct stay trial clicks only
clicks <- data %>% filter(sub==sid,ses==2,context==ctx,door_cc==1,switch==0)
counts <- count_paths(clicks)
tmp <- make_dirichlet(counts)
routineness <- rbind(routineness,cbind(sub=sid,context=ctx,tmp))
}
}
View(routineness)
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
write_csv(routines, fnl)
write_csv(routineness, fnl)
routineness %>% ggplot() + geom_violin(x=context,y=entropy)
View(routineness)
routineness %>% ggplot() + geom_violin(aes(x=context,y=entropy))
routineness %>% ggplot() + geom_violin(aes(x=factor(context),y=entropy))
View(data)
train_type <- unique(clicks$train_type)
# lydia barnes, september 2024
# reads and formats click data
# converts click data to count data for each of six possible paths
# generates dirichlet distribution from path count data
# extracts parameters and estimates entropy (our routineness measure)
rm(list=ls())
library(tidyverse)
source(file.path("src-dirich", "count_paths.R"))
source(file.path("src-dirich", "make_dirichlet.R"))
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
# -------------------------------------------------------------------------
# load data
fnl <- file.path(project_path, "res", paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
data <- read.csv(fnl)
# -------------------------------------------------------------------------
# loop through participants and contexts
routineness <- data.frame()
for (sid in unique(data$sub)){
for (ctx in unique(data$context)){
# get their train phase data, context-correct stay trial clicks only
clicks <- data %>% filter(sub==sid,ses==2,context==ctx,door_cc==1,switch==0)
counts <- count_paths(clicks)
tmp <- make_dirichlet(counts)
routineness <- rbind(routineness,cbind(sub=sid,context=ctx,train_type=unique(clicks$train_type),tmp))
}
}
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
write_csv(routineness, fnl)
routineness %>% ggplot() + geom_violin(aes(x=factor(train_type),y=entropy))
library(tidyverse)
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
title_sz = 40
label_sz <- 20
mk_sz <- 2
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
res <- read_csv(fnl, show_col_types = FALSE)
View(res)
res %>%
ggplot() +
geom_violin(aes(x = train_type, y = entropy, color = context, fill = context),
position = position_dodge(width = .7), alpha = .5, linewidth = .4) +
geom_boxplot(aes(x = train_type, y = entropy, fill = context),
position = position_dodge(width = .7), width = .05, linewidth = .7,
outlier.alpha = 1,outlier.shape = 21,outlier.size = 2.5,outlier.stroke = NA) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_x_discrete(labels = c("Low", "High")) +
labs(title = "", x = "Training Group", y = "Entropy") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
library(tidyverse)
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
title_sz = 40
label_sz <- 20
mk_sz <- 2
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
res <- read_csv(fnl, show_col_types = FALSE)
res %>%
ggplot() +
geom_violin(aes(x = factor(train_type), y = entropy, color = factor(context), fill = factor(context)),
position = position_dodge(width = .7), alpha = .5, linewidth = .4) +
geom_boxplot(aes(x = factor(train_type), y = entropy, fill = factor(context)),
position = position_dodge(width = .7), width = .05, linewidth = .7,
outlier.alpha = 1,outlier.shape = 21,outlier.size = 2.5,outlier.stroke = NA) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_x_discrete(labels = c("Low", "High")) +
labs(title = "", x = "Training Group", y = "Entropy") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
B <- read.csv(fnl)
View(B)
View(res)
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
A <- read_csv(fnl, show_col_types = FALSE)
res <- innerjoin(A,B,by = join_by(x$sub==y$sub,x$context==y$context))
res <- res %>% innerjoin(A,B,by = join_by(x$sub==y$sub,x$context==y$context))
res <- res %>% inner_join(A,B,by = join_by(x$sub==y$sub,x$context==y$context))
View(res)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
A <- read.csv(fnl)
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
B <- read_csv(fnl, show_col_types = FALSE)
res <- res %>% inner_join(A,B,by = join_by(x$sub==y$sub,x$context==y$context))
View(A)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
A <- read.csv(fnl)
View(A)
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
B <- read_csv(fnl, show_col_types = FALSE)
View(B)
res <- res %>% inner_join(A,B,by = join_by(x$sub==y$sub,x$context==y$context))
rm(list=ls())
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
library(tidyverse)
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
title_sz = 40
label_sz <- 20
mk_sz <- 2
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
A <- read.csv(fnl)
fnl <- file.path(project_path, "res", paste(paste(exp, "routines", sep = "_"), ".csv", sep = ""))
B <- read_csv(fnl, show_col_types = FALSE)
res <- res %>% inner_join(A,B,by = join_by(x$sub==y$sub,x$context==y$context))
res <- inner_join(A,B,by = join_by(x$sub==y$sub,x$context==y$context))
View(res)
res %>%
ggplot() +
geom_plot(aes(x = entropy, y = reclicks, color = factor(train_type), fill = factor(train_type)),
position = position_dodge(width = .7), alpha = .5, linewidth = .4) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
labs(title = "", x = "Entropy", y = "Re-Clicks") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot() +
geom_point(aes(x = entropy, y = reclicks, color = factor(train_type), fill = factor(train_type)),
position = position_dodge(width = .7), alpha = .5, linewidth = .4) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
labs(title = "", x = "Entropy", y = "Re-Clicks") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
View(res)
res %>%
ggplot() +
geom_point(aes(x = entropy, y = context_change, color = factor(train_type), fill = factor(train_type)),
position = position_dodge(width = .7), alpha = .5) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
labs(title = "", x = "Entropy", y = "Context Shifts") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot() +
geom_point(aes(x = entropy, y = context_changes, color = factor(train_type), fill = factor(train_type)),
position = position_dodge(width = .7), alpha = .5) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
labs(title = "", x = "Entropy", y = "Context Shifts") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot() +
geom_point(aes(x = entropy, y = context_changes, color = factor(train_type.x), fill = factor(train_type.x)),
position = position_dodge(width = .7), alpha = .5) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
labs(title = "", x = "Entropy", y = "Context Shifts") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
filter(ses==2) %>%
ggplot() +
geom_point(aes(x = entropy, y = context_changes, color = factor(train_type.x), fill = factor(train_type.x)),
position = position_dodge(width = .7), alpha = .5) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Train Type",
labels = c("Low Switch","High Switch")
) +
labs(title = "", x = "Entropy", y = "Context Shifts") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot() +
geom_violin(aes(x = factor(train_type.x), y = entropy, color = factor(context), fill = factor(context)),
position = position_dodge(width = .7), alpha = .5, linewidth = .4) +
geom_boxplot(aes(x = factor(train_type.x), y = entropy, fill = factor(context)),
position = position_dodge(width = .7), width = .05, linewidth = .7,
outlier.alpha = 1,outlier.shape = 21,outlier.size = 2.5,outlier.stroke = NA) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_x_discrete(labels = c("Low", "High")) +
labs(title = "", x = "Training Group", y = "Entropy") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
filter(ses==2) %>%
ggplot() +
geom_violin(aes(x = factor(train_type.x), y = entropy, color = factor(context), fill = factor(context)),
position = position_dodge(width = .7), alpha = .5, linewidth = .4) +
geom_boxplot(aes(x = factor(train_type.x), y = entropy, fill = factor(context)),
position = position_dodge(width = .7), width = .05, linewidth = .7,
outlier.alpha = 1,outlier.shape = 21,outlier.size = 2.5,outlier.stroke = NA) +
theme_classic() +
scale_colour_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_fill_manual(values = c("#F8CF71","#ABEBC6"),
name = "Context",
#labels = c("Non-Switch","Switch")
) +
scale_x_discrete(labels = c("Low", "High")) +
labs(title = "", x = "Training Group", y = "Entropy") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
read_csv("/Users/lydiabarnes/Documents/academe/projects/great-graph-2024/20231215_timed_r.csv",show_col_types=FALSE)
library(tidyverse)
read_csv("/Users/lydiabarnes/Documents/academe/projects/great-graph-2024/20231215_timed_r.csv",show_col_types=FALSE)
read_csv("/Users/lydiabarnes/Documents/academe/projects/great-graph-2024/data/20231215_timed_r.csv",show_col_types=FALSE)
data <- read_csv("/Users/lydiabarnes/Documents/academe/projects/great-graph-2024/data/20231215_timed_r.csv",show_col_types=FALSE)
View(data)
wide_data <- data %>% pivot_wider(names_from = c(duration,block_type,disambiguation),values_fromc(rt,dprime))
wide_data <- data %>% pivot_wider(names_from = c(duration,block_type,disambiguation),values_from = c(rt,dprime))
View(wide_data)
wide_data <- data %>% pivot_wider(names_from = c(block_type,disambiguation,duration),values_from = c(rt,dprime))
wide_data <- data %>% pivot_wider(names_from = c(block_type,disambiguation,duration),values_from = dprime)
wide_data <- data %>% select(!rt) %>% pivot_wider(names_from = c(block_type,disambiguation,duration),values_from = dprime)
write_csv("/Users/lydiabarnes/Documents/academe/projects/great-graph-2024/20231215_timed_r_wide.csv")
write_csv(wide_data,"/Users/lydiabarnes/Documents/academe/projects/great-graph-2024/20231215_timed_r_wide.csv")
