# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
for(ses in sess){
data <- get_data(data_path,exp,sub,sess)
grp_data <- rbind(grp_data,data[[idx]])
}
}
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
session = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
for(ses in sess){
data <- get_data(data_path,exp,sub,sess)
grp_data <- rbind(grp_data,data[[idx]])
}
}
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
for(ses in sess){
data <- get_data(data_path,exp,sub,sess)
grp_data <- rbind(grp_data,data[[idx]])
}
}
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
for(ses in sess){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
}
View(grp_data)
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric()
)
ses <- 'ses-train'
sub <- 'sub-01'
data <- get_data(data_path,exp,sub,ses)
View(clicks)
train_type <- clicks %>% group_by(t) %>% summarise(train_type = mean(switch))
View(train_type)
train_type <- clicks %>% summarise(train_type = mean(switch))
View(train_type)
sr <- clicks %>% summarise(sr = mean(switch))
sr$sr[[1]]
length(clicks)
nrow(clicks)
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
clicks <- clicks %>% mutate(trial_type <- kronecker(matrix(1,nrow(clicks),1),1))
View(clicks)
clicks <- clicks %>% mutate(trial_type = kronecker(matrix(1,nrow(clicks),1),1))
View(clicks)
x <- kronecker(matrix(1,nrow(clicks),1),1)
View(x)
x <- t(kronecker(matrix(1,nrow(clicks),1),1))
View(x)
x <- data.frame(t(kronecker(matrix(1,nrow(clicks),1),1)))
View(x)
clicks <- clicks %>% mutate(trial_type = data.frame(kronecker(matrix(1,nrow(clicks),1),1)))
View(clicks)
tt <- kronecker(matrix(1,nrow(clicks),1),1)
clicks <- clicks %>% mutate(trial_type = tt)
View(clicks)
clicks <- clicks %>% mutate(trial_type = kronecker(matrix(nrow(clicks),1),1))
View(clicks)
clicks <- clicks %>% mutate(trial_type = kronecker(matrix(nrow(clicks)),1))
View(clicks)
View(clicks)
x <- kronecker(matrix(nrow(clicks)),1)
kronecker(matrix(nrow(clicks)),1)
kronecker(matrix(nrow(clicks),1))
kronecker(matrix(nrow(clicks)) )
kronecker
kronecker(nrow(clicks),1,1)
kronecker(nrow(clicks),1,sr)
kronecker(matrix(1,2,3),1)
kronecker(matrix(1,nrow(clicks),1),1)
x <- kronecker(matrix(1,nrow(clicks),1),1)
x[1]
c(x)
y <-  c(x)
clicks <- clicks %>% mutate(trial_type = c(kronecker(matrix(1,nrow(clicks),1),1)))
View(clicks)
source("~/Documents/academe/projects/doors/src/get_data.R")
source(file.path(wd,'get_data.R'))
data <- get_data(data_path,exp,sub,ses)
source("~/Documents/academe/projects/doors/src/get_data.R")
source(file.path(wd,'get_data.R'))
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
View(grp_data)
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/run_analysis.R")
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240325"
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-test' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,ses,mes,'avg',sep='_'),'.csv',sep = ""))
results <- read.csv(fnl)
results <- results %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
View(results)
source("~/Documents/academe/projects/doors/src/run_analysis.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# add the option to quickly turn off grouping by switch/stay
# track whether errors fall on other-context or no-context doors
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
}
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
data <- get_data(data_path,exp,sub,ses)
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
source("~/Documents/academe/projects/doors/src/get_data.R")
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# add the option to quickly turn off grouping by switch/stay
# track whether errors fall on other-context or no-context doors
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
train_type <- NA
if(ses == 'ses-test'){
train_type <- grp_data %>% filter(sub == sub,ses == 'ses-train') %>% select(train_type)
}
data <- get_data(data_path,exp,sub,ses,train_type)
grp_data <- rbind(grp_data,data[[idx]])
}
}
source("~/Documents/academe/projects/doors/src/run_analysis.R")
train_type <- grp_data %>% filter(sub == sub && ses == 'ses-train') %>% select(train_type)
train_type <- grp_data %>% filter(sub == sub && ses == 'ses-train')
train_type <- grp_data %>% filter(sub == sub & ses == 'ses-train')
train_type <- grp_data %>% filter(sub == sub & ses == 1) %>% select(train_type)
train_type <- grp_data %>% filter(sub == sub & ses == 1)
train_type <- grp_data %>% filter(sub == sub & ses == 2) %>% select(train_type)
source("~/Documents/academe/projects/doors/src/run_analysis.R")
View(res)
source("~/Documents/academe/projects/doors/src/run_analysis.R")
View(res)
# lydia barnes, march 2024
# generates figues from 'doors' project RT and accuracy outputs
###
# sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240325"
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-test' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,ses,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
View(res)
# settings
version <- "20240325"
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-test' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
###
# plot the data!
fnl <- file.path(project_path, "res", paste(paste(version,exp,ses,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
fnl <- file.path(project_path, "res", paste(paste(version,exp,ses,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
View(res)
source("~/Documents/academe/projects/doors/src/run_analysis.R")
fnl
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
getwd()
project_path <- getwd() #if you open the project thru doors.Rproj, your working directory will automatically be the project path
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors' #if data are within the project directory, update to file.path(project_path,'data')
# settings
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
sess <- c('ses-train','ses-test') #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'clicks' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
# format the raw data
grp_data <- data.frame(
sub = integer(),
ses = integer(),
t = integer(),
context = integer(),
onset = numeric(),
door = integer(),
door_correct = integer(),
offset = numeric(),
switch = integer(),
train_type = integer()
)
for(sub in subs){
for(ses in sess){
train_type <- NA
if(ses == 'ses-test'){
train_type <- grp_data %>% filter(sub == sub & ses == 2) %>% select(train_type)
}
data <- get_data(data_path,exp,sub,ses,train_type)
grp_data <- rbind(grp_data,data[[idx]])
}
}
res <- grp_data %>% group_by(sub,ses,t,context,switch,train_type) %>% summarise(
switch = max(switch),
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
) %>% select(!n_clicks:n_correct)
View(res)
fnl <- file.path(project_path,'res',paste(paste(version,exp,sess,mes,'trl',sep='_'),'.csv',sep = ""))
fnl <- file.path(project_path,'res',paste(paste(version,exp,mes,'trl',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
#   by subject
res <- res %>% group_by(sub,ses,context,switch,train_type) %>% summarise(rt = mean(rt),accuracy = mean(accuracy))
fnl <- file.path(project_path,'res',paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
write_csv(res,fnl)
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "20240325"
exp <- 'exp_lt' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- 'ses-test' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
fnl <- file.path(project_path, "res", paste(paste(version,exp,mes,'avg',sep='_'),'.csv',sep = ""))
res <- read.csv(fnl)
View(res)
res <- res %>% filter(ses==ses) %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
View(res)
res <- read.csv(fnl)
res <- res %>% mutate(switch = case_when(switch==0~"Switch",switch==1~"Stay")) %>% mutate(train_type = as.character(train_type))
if(ses=='ses-test'){res <- res %>% filter(ses==3)}else{res <- res %>% filter(ses==2)}
res %>%
ggplot() +
geom_hline(yintercept=0.5,linetype='solid',linewidth=1,alpha=1,color='black') +
geom_jitter(aes(x=train_type,y=accuracy,shape=switch,color=switch),position = position_jitterdodge(dodge.width = .3,jitter.width=.1),alpha = .5,size = mk_sz) +
stat_summary(aes(x=train_type,y=accuracy,shape=switch,color=switch),fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .3),linewidth = 2,size = mk_sz/2,alpha = 1) +
stat_summary(aes(x=train_type,y=accuracy,color=switch),fun = "mean",geom = "line", position = position_dodge(width = .3),linewidth = 1,alpha = 1) +
theme_minimal() +
scale_shape_discrete(name = "Switch Condition", labels = c("Switch","Stay")) +
scale_color_lancet(guide="none") +
scale_x_discrete(labels = c("Low Switch","High Switch")) +
labs(title = "", x = "Training Condition", y = "Accuracy (%)") +
theme(plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz),axis.text.y = element_text(size = label_sz),legend.text = element_text(size=label_sz),
axis.title.x = element_text(size = label_sz),axis.title.y = element_text(size = label_sz),legend.title=element_text(size=label_sz))
