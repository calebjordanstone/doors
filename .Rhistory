res <- grp_data %>%
group_by(sub, ses, t, context, train_type, transfer, full_transfer_first, original_house) %>%
summarise(
switch = max(switch), n_clicks = n(), n_cc = sum(door_cc), n_oc = sum(door_oc),
accuracy = n_cc / n_clicks,
setting_errors = n_oc / n_clicks
)
rt <- grp_data %>%
group_by(sub, ses, t, context, train_type, transfer) %>%
filter(door_cc == 1) %>%
summarise(rt = min(off)) # time to first correct click offset
res$rt <- rt$rt
# add accuracy calculated the way it was for points during the task
other_accuracy <- 4-res$n_clicks >= 0
res$other_accuracy <- other_accuracy
# record the number of times they switch between door_cc, door_oc, and door_nc on each trial.
# if it's a non-switch trial, assume that they're coming from door_cc. if it's a switch, assume that they're coming from door_oc.
grp_data <- grp_data %>% mutate(door_nc = case_when(door_cc==1 ~ 0, door_oc == 1 ~ 0, .default=1))
nswitches <- c()
for (s in unique(grp_data$sub)){
for (ss in unique(grp_data$ses)){
tmp <- grp_data %>% filter(sub==s,ses==ss)
for (trial in unique(tmp$t)){
data <- tmp %>% filter(t==trial)
switch <- data$switch[[1]]
if(switch==0){
door_cc <- c(1,data$door_cc)
door_oc <- c(0,data$door_oc)
}else if(switch==1){
door_cc <- c(0,data$door_cc)
door_oc <- c(1,data$door_oc)
}
door_nc <- c(0,data$door_nc)
cc_switches <- diff(door_cc)
oc_switches <- diff(door_oc)
nc_switches <- diff(door_nc)
switches <- data.frame(cc_switches,oc_switches,nc_switches)
switches <- switches %>% mutate(switch = case_when(cc_switches==1~1,oc_switches==1~1,nc_switches==1~1,.default=0))
nswitches <- c(nswitches,sum(switches$switch))
}
}
}
res$context_changes <- nswitches
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "trl", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# by subject
res <- res %>%
group_by(sub, ses, context, switch, train_type, transfer, full_transfer_first, original_house) %>%
summarise_all(mean)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
library(tidyverse)
library(ggforce)
library(ggsci)
project_path <- getwd()
# settings
version <- "study-01"
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
mes <- "clicks" # measure: 'clicks' or 'hovers'
label_sz <- 20
mk_sz <- 2
# data
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
View(res)
subject <- 1
tmp <- res %>% filter(sub==subject)
View(tmp)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses)), linewidth = 2) +
theme_minimal() +
scale_color_lancet(
name = "Phase",
labels = c("Learn","Train","Tes")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses)), linewidth = 2) +
theme_minimal() +
scale_color_lancet(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), group = switch), linewidth = 2) +
theme_minimal() +
scale_color_lancet(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), group = factor(switch)), linewidth = 2) +
theme_minimal() +
scale_color_lancet(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 2) +
theme_minimal() +
scale_color_lancet(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 2) +
theme_minimal() +
scale_color_lancet(
name = "Phase",
labels = c("Learn","Train","Test")
) +
guides(linetype=FALSE) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 2) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1.5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1.5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
library(ggpubr)
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1.5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 6, height = 30, limitsize = FALSE)
ggsave(fnl, plot = last_plot(), width = 18, height = 90, limitsize = FALSE)
ggarrange(plotlist=pl,nrow=34,ncol=3)
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 18, height = 90, limitsize = FALSE)
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 18, height = 90, limitsize = FALSE)
subject <- 82
tmp <- res %>% filter(sub==subject)
View(tmp)
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
source(file.path(getwd(), "src", "get_subs.R"))
source(file.path(getwd(), "src", "get_switch.R"))
source(file.path(getwd(), "src", "get_data.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn","ses-train","ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
# !you can change the following settings if you want to, but the defaults will usually be fine
mes <- "clicks" # measure: 'clicks' or 'hovers'. usually want 'clicks'.
if (mes == "clicks") {
idx <- 1
} else {
idx <- 2
}
apply_threshold <- FALSE # only retain events that lasted more than a given duration?
min_dur <- 0.1 # minimum duration
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), on = numeric(), off = numeric(), subses = integer(), door_oc = integer(),
switch = integer(), train_type = integer(), transfer = integer(), full_transfer_first = integer(),
original_house = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors, apply_threshold, min_dur) # load and format raw data
grp_data <- rbind(grp_data, data[[idx]]) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
source(file.path(getwd(), "src", "get_subs.R"))
source(file.path(getwd(), "src", "get_switch.R"))
source(file.path(getwd(), "src", "get_data.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn","ses-train","ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
# !you can change the following settings if you want to, but the defaults will usually be fine
mes <- "clicks" # measure: 'clicks' or 'hovers'. usually want 'clicks'.
if (mes == "clicks") {
idx <- 1
} else {
idx <- 2
}
apply_threshold <- FALSE # only retain events that lasted more than a given duration?
min_dur <- 0.1 # minimum duration
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), on = numeric(), off = numeric(), subses = integer(), door_oc = integer(),
switch = integer(), train_type = integer(), transfer = integer(), full_transfer_first = integer(),
original_house = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors, apply_threshold, min_dur) # load and format raw data
grp_data <- rbind(grp_data, data[[idx]]) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
# save the formatted data
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
write_csv(grp_data, fnl)
### extract accuracy and response time averages from event data
# by trial
res <- grp_data %>%
group_by(sub, ses, t, context, train_type, transfer, full_transfer_first, original_house) %>%
summarise(
switch = max(switch), n_clicks = n(), n_cc = sum(door_cc), n_oc = sum(door_oc),
accuracy = n_cc / n_clicks,
setting_errors = n_oc / n_clicks
)
rt <- grp_data %>%
group_by(sub, ses, t, context, train_type, transfer) %>%
filter(door_cc == 1) %>%
summarise(rt = min(off)) # time to first correct click offset
res$rt <- rt$rt
# add accuracy calculated the way it was for points during the task
other_accuracy <- 4-res$n_clicks >= 0
res$other_accuracy <- other_accuracy
# record the number of times they switch between door_cc, door_oc, and door_nc on each trial.
# if it's a non-switch trial, assume that they're coming from door_cc. if it's a switch, assume that they're coming from door_oc.
grp_data <- grp_data %>% mutate(door_nc = case_when(door_cc==1 ~ 0, door_oc == 1 ~ 0, .default=1))
nswitches <- c()
for (s in unique(grp_data$sub)){
for (ss in unique(grp_data$ses)){
tmp <- grp_data %>% filter(sub==s,ses==ss)
for (trial in unique(tmp$t)){
data <- tmp %>% filter(t==trial)
switch <- data$switch[[1]]
if(switch==0){
door_cc <- c(1,data$door_cc)
door_oc <- c(0,data$door_oc)
}else if(switch==1){
door_cc <- c(0,data$door_cc)
door_oc <- c(1,data$door_oc)
}
door_nc <- c(0,data$door_nc)
cc_switches <- diff(door_cc)
oc_switches <- diff(door_oc)
nc_switches <- diff(door_nc)
switches <- data.frame(cc_switches,oc_switches,nc_switches)
switches <- switches %>% mutate(switch = case_when(cc_switches==1~1,oc_switches==1~1,nc_switches==1~1,.default=0))
nswitches <- c(nswitches,sum(switches$switch))
}
}
}
res$context_changes <- nswitches
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "trl", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# by subject
res <- res %>%
group_by(sub, ses, context, switch, train_type, transfer, full_transfer_first, original_house) %>%
summarise_all(mean)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
version <- "study-01"
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
mes <- "clicks" # measure: 'clicks' or 'hovers'
label_sz <- 20
mk_sz <- 2
# data
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1.5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 18, height = 90, limitsize = FALSE)
install.packages("wesanderson")
library(tidyverse)
library(wesanderson)
p_ca <- 0.7 # prior probability of A, given you were just in A
priors <- c(p_ca, 1-p_ca) # prior probability of both contexts
ps_g_c <- c(1, 0.75, 0.5, 0.25, 0) # probability of fails given remaining N from that context, goes from 0 to 4
names(ps_g_c) <- c("0", "1", "2", "3", "4")
get_prob_context <- function(priors, ps_g_c, n, m){
# n is a string, matching the name of the number of n drawn
# note that m doesn't require definition for the first prior (nor n for the second), as p(m) given the other context is always 1, thus any number of m is implicit in the calculation
ps_g_c[n]*priors[1]/(ps_g_c[n]*priors[1] + ps_g_c[m]*priors[2])
}
states <- c("0", "1", "2", "3", "4")
n_options = length(states)
ns <- rep(states, times=n_options)
ms <- rep(states, each=n_options)
# first, get the probability of being in context A, given the n fails drawn
ps_ca <- unlist(mapply(get_prob_context, ns, ms, MoreArgs = list(priors=priors, ps_g_c=ps_g_c)))
ps_cb <- 1 - ps_ca
prob_context <- tibble(n = rep(ns, times=2),
m = rep(ms, times=2),
prob_context = c(ps_ca, ps_cb),
context = rep(c("A", "B"), each=length(ps_ca)))
prob_context %>% ggplot(aes(x=n, y=prob_context, fill=context)) +
geom_bar(stat = "identity", position="dodge", alpha=0.75) +
scale_fill_manual(values=wes_palette("AsteroidCity2")[c(5:6)]) +
facet_wrap(~m)
