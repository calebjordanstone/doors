#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
coord_trans(x="log", y = "log") +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
coord_trans(x="log", y = "log") +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
coord_trans(x="log", y = "log") +
xlim(0,1)+
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
coord_trans(x="log", y = "log") +
xlim(c(0,1))+
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
coord_trans(x="log", y = "log") +
ylim(c(0,1))+
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
ylim(c(0,1))+
coord_trans(x="log", y = "log") +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
ylim(0,1)+
coord_trans(x="log", y = "log") +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
?ylim
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
filter(accuracy>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
ylim(0,1) +
coord_trans(x="log", y = "log") +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
filter(accuracy>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
ylim(0.5,1) +
coord_trans(x="log", y = "log") +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
#mutate(
#  accuracy = log(accuracy),
#  perseveration = log(perseveration)
#) %>%
#filter(is.finite(accuracy), is.finite(perseveration)) %>%
filter(perseveration>0) %>%
filter(accuracy>0) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
ylim(0.1,1) +
coord_trans(x="log", y = "log") +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
mutate(
accuracy = log(accuracy),
perseveration = log(perseveration)
) %>%
filter(is.finite(accuracy), is.finite(perseveration)) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
ylim(0.1,1) +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
plot_data %>%
mutate(
accuracy = log(accuracy),
perseveration = log(perseveration)
) %>%
filter(is.finite(accuracy), is.finite(perseveration)) %>%
ggplot(aes(x = perseveration, y = accuracy, colour = transfer, fill = transfer)) +
geom_point(colour="black", size = 2.5, alpha = .7, shape=21, stroke = 1) +
geom_smooth(method="lm", se=TRUE) +
scale_colour_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
scale_fill_manual(values = wes_palette("IsleofDogs1"), labels = c("Identity", "Mixed")) +
theme_minimal() +
labs(
title = "",
x = "Perseveration", y = "Accuracy", fill = "Transfer", colour = "Transfer"
) +
theme(
plot.title = element_text(size = title_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz),
strip.text.x = element_text(size = label_sz)
)
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
library(zeallot) #unpack/destructure with %<-%
source(file.path("src", "get_subs.R"))
source(file.path("src", "get_switch.R"))
source(file.path("src", "get_data.R"))
source(file.path("src","get_setting_stability.R"))
source(file.path("src","get_transition_probabilities.R"))
source(file.path("src","get_learned_doors.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn","ses-train","ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), subses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), door_oc = integer(), on = numeric(), off = numeric(),
switch = integer(), train_type = integer(), transfer = integer(), full_transfer_first = integer(),
original_house = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
if (exp=="exp_lt" && sub=="sub-64" && ses=="ses-learn"){
print("skipping missing data")
}else{
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors) # load and format raw data
grp_data <- rbind(grp_data, data) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
}
# track whether context-incorrect clicks in the test phase land on doors that were learned in the train phase
if(exp=="exp_lt"){
door_lc <- get_learned_doors(grp_data)
grp_data <- grp_data %>% add_column(door_lc = door_lc, .after="door_oc")
}else{
grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
}
# track when they changed context into the correct or other context's door set
select_context <- get_setting_stability(grp_data)
grp_data <- grp_data %>% add_column(select_cc = select_context$s_cc,select_oc = select_context$s_oc, select_oc_late = select_context$s_oc_late, select_total = select_context$s_total, select_cumulative = select_context$s_cumulative,.after="door_lc")
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
library(zeallot) #unpack/destructure with %<-%
source(file.path("src", "get_subs.R"))
source(file.path("src", "get_switch.R"))
source(file.path("src", "get_data.R"))
source(file.path("src","get_setting_stability.R"))
source(file.path("src","get_transition_probabilities.R"))
source(file.path("src","get_learned_doors.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn","ses-train","ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), subses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), door_oc = integer(), on = numeric(), off = numeric(),
switch = integer(), train_type = integer(), transfer = integer(), full_transfer_first = integer(),
original_house = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
if (exp=="exp_lt" && sub=="sub-64" && ses=="ses-learn"){
print("skipping missing data")
}else{
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors) # load and format raw data
grp_data <- rbind(grp_data, data) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
}
# track whether context-incorrect clicks in the test phase land on doors that were learned in the train phase
if(exp=="exp_lt"){
door_lc <- get_learned_doors(grp_data)
grp_data <- grp_data %>% add_column(door_lc = door_lc, .after="door_oc")
}else{
grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
}
data <- grp_data
select_context <- data.frame(s_cc=integer(),s_oc=integer(),s_oc_late=integer(),s_total=integer(),s_cumulative=integer())
for(su in unique(data$sub)){
for(se in unique(data$ses)){
sdata <- data %>% filter(sub==su,ses==se)
for (trial in unique(sdata$t)){
tdata <- sdata %>% filter(t==trial)
door_cc <- tdata %>% pull(door_cc) #when do they click in the current context?
door_oc <- tdata %>% pull(door_oc) #when do they click in the other context?
if(unique(tdata$ses) == 2 && unique(tdata$switch) == 1){
door_oc <- c(1,door_oc) #assume that, on uncued switch trials, they start in the other context
door_cc <- c(0,door_cc)
}else{
door_cc <- c(1,door_cc) #otherwise, assume that they start in the correct context
door_oc <- c(0,door_oc)
}
#get context changes
s_cc <- diff(door_cc)
s_oc <- diff(door_oc)
#ignore switches away, and only count switches into
s_cc[s_cc<0] <- 0
s_oc[s_oc<0] <- 0
#make a variable that ignores the first switch
s_oc_late <- s_oc
s_oc_late[1] <- 0
tmp <- data.frame(s_cc,s_oc,s_oc_late) %>% mutate(s_total = case_when(s_cc==1~1,s_oc==1~1,.default=0)) %>% mutate(s_cumulative = cumsum(s_total))
select_context <- rbind(select_context,tmp)
}
}
}
x <- data
x <- x %>% mutate(scca = case_when(diff(c(1,door_cc))>0~1,.default=0), sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), scc = case_when(ses==2 & switch==1 ~ sccb, .default=scca))
View(x)
x <- x %>% select(!c(on,off,train_type,transfer,full_transfer_first,original_house))
x <- data %>% mutate(group_by(sub,ses,t),scca = case_when(diff(c(1,door_cc))>0~1,.default=0), sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), scc = case_when(ses==2 & switch==1 ~ sccb, .default=scca)) %>% select(!c(on:original_house))
x <- data %>% group_by(sub,t) %>% mutate(scca = case_when(diff(c(1,door_cc))>0~1,.default=0), sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), scc = case_when(ses==2 & switch==1 ~ sccb, .default=scca)) %>% select(!c(on:original_house))
View(data)
x <- data %>% group_by(sub,t) %>% mutate(scca = case_when(diff(c(1,door_cc))>0~1,.default=0), sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), scc = case_when(ses==2 & switch==1 ~ sccb, .default=scca)) %>% select(!c(on,off,train_type:original_house))
x <- data %>% group_by(sub,ses,t) %>% mutate(scca = case_when(diff(c(1,door_cc))>0~1,.default=0), sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), scc = case_when(ses==2 & switch==1 ~ sccb, .default=scca)) %>% select(!c(on,off,train_type:original_house))
View(x)
x <- data %>%
group_by(sub,ses,t) %>%
mutate(
scca = case_when(diff(c(1,door_cc))>0~1,.default=0),
sccb = case_when(diff(c(0,door_cc))>0~1,.default=0),
scc = case_when(ses==2 & switch==1 ~ sccb, .default=scca),
soca = case_when(diff(c(0,door_oc))>0~1,.default=0),
socb = case_when(diff(c(1,door_oc))>0~1,.default=0),
soc = case_when(ses==2 & switch==1 ~ socb, .default=soca),
soc_late = case_when(t[-1]!=t~0,.default=soc)
) %>%
select(!c(on,off,train_type:original_house))
x <- data %>%
group_by(sub,ses,t) %>%
mutate(
scca = case_when(diff(c(1,door_cc))>0~1,.default=0),
sccb = case_when(diff(c(0,door_cc))>0~1,.default=0),
scc = case_when(ses==2 & switch==1 ~ sccb, .default=scca),
soca = case_when(diff(c(0,door_oc))>0~1,.default=0),
socb = case_when(diff(c(1,door_oc))>0~1,.default=0),
soc = case_when(ses==2 & switch==1 ~ socb, .default=soca),
soc_late = case_when(diff(0,t)~0,.default=soc)
) %>%
select(!c(on,off,train_type:original_house))
