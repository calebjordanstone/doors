### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
View(df)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
View(df)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
tr <- 3
trial <- events %>% filter(t == tr)
match <- 0
for (sol in unique(opt_sub$solution)) {
solution <- opt_sub$door[opt_sub$solution == sol]
if (all(solution[1:length(trial$door)] == trial$door)) {
match <- 1
break
}
}
tr <- 3
trial <- events %>% filter(t == tr)
# do their clicks match a shortest path?
match <- 0
for (sol in unique(opt_sub$solution)) {
solution <- opt_sub$door[opt_sub$solution == sol]
if (all(solution[1:length(trial$door)] == trial$door)) {
match <- 1
break
}
}
solution
shortest <- 0
for (sol in unique(opt_sub$solution)) {
solution <- opt_sub$door[opt_sub$solution==sol]
this_shortest <- 0
for (i in 2:length(solution)){
this_shortest <- this_shortest + graph[solution[i-1],solution[i]]
}
if (sol==1){
shortest <- this_shortest
message("opt path: ",shortest)
}else{
shortest <- min(c(shortest,this_shortest))
message("updated opt. path: ",shortest)
}
}
solution
sol = 2
solution <- opt_sub$door[opt_sub$solution==sol]
solution
path <- trial$door
unclicked <- doors_cc[!doors_cc %in% path]
unclicked
path
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
paths <- add_column(paths,V0 = rep(path[length(path)],nrow(paths)),.before="V1")
paths
travelled <- 0
i <- 1
this_path <- paths %>% slice(i) %>% unlist(use.names=FALSE)
this_path
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
paths <- add_column(paths,V0 = rep(path[1:length(path)],nrow(paths)),.before="V1")
paths
d <- do.call("rbind", replicate(nrow(paths), as_tibble(unclicked), simplify = FALSE))
View(d)
as_tibble(unclicked)
data.frame(unclicked)
df <- data.frame(matrix(unlist(unclicked), nrow=length(unclicked), byrow=TRUE))
View(df)
df <- data.frame(matrix(unlist(unclicked), nrow=1, byrow=FALSE))
View(df)
df <- do.call("rbind", replicate(nrow(paths), df, simplify = FALSE))
View(df)
nrow(paths)
paths <- cbind(df,paths)
View(paths)
#   otherwise, find the most efficient way to end this sequence
path <- trial$door #the doors they clicked, in the order they took (inc. re-clicks)
unclicked <- doors_cc[!doors_cc %in% path]
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
df <- data.frame(matrix(unlist(path), nrow=1, byrow=FALSE))
df <- do.call("rbind", replicate(nrow(paths), df, simplify = FALSE))
paths <- cbind(df,paths)
View(paths)
travelled <- 0
for (i in 1:nrow(paths)){
this_path <- paths %>% slice(i) %>% unlist(use.names=FALSE)
this_travelled <- 0
for(ii in 2:length(this_path)){
this_travelled <- this_travelled + graph[this_path[ii-1], this_path[ii]]
}
if(i==1){
travelled <- this_travelled
message("distance travelled on first putative path is ",travelled)
}else{
travelled <- min(c(travelled,this_travelled))
message("updated distance travelled is ",travelled)
}
}
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
View(df)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
opt_sub <- opt %>% filter(sub == su, context == co, algorithm == "hc")
View(opt_sub)
df <- data.frame(match = integer(), travelled = double(), shortest = double(), overshoot = double())
doors_cc <- unique(events$door)
doors_cc
shortest <- 0
for (sol in unique(opt_sub$solution)) {
solution <- opt_sub$door[opt_sub$solution==sol]
this_shortest <- 0
for (i in 2:length(solution)){
this_shortest <- this_shortest + graph[solution[i-1],solution[i]]
}
if (sol==1){
shortest <- this_shortest
message("opt path: ",shortest)
}else{
shortest <- min(c(shortest,this_shortest))
message("updated opt. path: ",shortest)
}
}
tr = 1
message("TRIAL: ",tr)
trial <- events %>% filter(t == tr)
match <- 0
for (sol in unique(opt_sub$solution)) {
solution <- opt_sub$door[opt_sub$solution == sol]
if (all(solution[1:length(trial$door)] == trial$door)) {
match <- 1
break
}
}
match
path <- trial$door #the doors they clicked, in the order they took (inc. re-clicks)
unclicked <- doors_cc[!doors_cc %in% path]
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
d <- data.frame(matrix(unlist(path), nrow=1, byrow=FALSE))
d <- do.call("rbind", replicate(nrow(paths), d, simplify = FALSE))
paths <- cbind(d,paths)
paths
travelled <- 0
for (i in 1:nrow(paths)){
this_path <- paths %>% slice(i) %>% unlist(use.names=FALSE)
this_travelled <- 0
for(ii in 2:length(this_path)){
this_travelled <- this_travelled + graph[this_path[ii-1], this_path[ii]]
}
if(i==1){
travelled <- this_travelled
message("distance travelled on first putative path is ",travelled)
}else{
travelled <- min(c(travelled,this_travelled))
message("updated distance travelled is ",travelled)
}
}
}
overshoot <- travelled - shortest
overshoot
df[nrow(df) + 1, ] <- data.frame(match,travelled,shortest,overshoot)
df
opt_sub <- opt %>% filter(sub == su, context == co, algorithm == "tsp")
df <- compare_paths(graph,events,opt_sub)
for (tr in unique(events$t)){
path_match[nrow(path_match)+1,] <- data.frame(su,se,tr,co,ss)
}
path_match <- data.frame(sub = integer(), ses = integer(), t = integer(), context = integer(), subses = integer())
for (tr in unique(events$t)){
path_match[nrow(path_match)+1,] <- data.frame(su,se,tr,co,ss)
}
opt_sub <- opt %>% filter(sub == su, context == co, algorithm == "tsp")
df <- compare_paths(graph,events,opt_sub)
df_tsp <- df %>% rename(match_tsp = match,shortest_tsp = shortest, travelled_tsp = travelled, overshoot_tsp = overshoot)
View(df_tsp)
opt_sub <- opt %>% filter(sub == su, context == co, algorithm == "hc")
df <- compare_paths(graph,events,opt_sub)
df_hc <- df %>% rename(match_hc = match,shortest_hc = shortest, travelled_hc = travelled, overshoot_hc = overshoot)
View(df_hc)
path_match <- cbind(path_match,df_tsp,df_hc)
View(path_match)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO: generate shortest paths for three-click trials generate shortest paths for contexts used in
# 'test' phase (for exp_lt) save only the true shortest path, not the shortest path starting at
# each door fix path comparison so that...  if they clicked once, path and shortest path are 0 if
# they clicked twice, path and shortest path are the distance between the two doors if they clicked
# three times or four times, we (a) check whether they matched a shortest path and (b) check the
# difference between their chosen path and the true shortest verify that participants are not able
# to out-perform the optimal path!
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "transitions", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[2]], fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "travelled", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[3]], fnl)
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
