high_switch_transfer_effect <- c(1, 0, -1, 0) #comparing accuracies for high-switch only
complete_transfer_effect <- c(1, -1, 0, 0) # comparing between groups on stay trials
partial_transfer_effect <- c(0, 0, 1, -1) # comparing  between groups on sitch trials
simple_effect_contrasts <- list(low_switch_transfer_effect,
high_switch_transfer_effect,
complete_transfer_effect,
partial_transfer_effect
)
contrast(sum_emm_int, simple_effect_contrasts) #contrasts analyses for simple effects
#   variance
test_data %>%
group_by(train_type, transfer, complete_first) %>%
summarise(variance = var(accuracy))
#   mean and sd
test_data %>%
group_by(train_type, transfer) %>%
summarise(mean_acc = mean(accuracy),
sd = sd(accuracy))
test_results <- aov_ez("sub", "learned_setting_errors", test_data, within = "transfer",
between = c("train_type", "complete_first"))
summary(test_results)
test_data %>%
group_by(transfer) %>%
summarise(mean = mean(learned_setting_errors),
sd = sd(learned_setting_errors))
test_results <- aov_ez("sub", "general_errors", test_data, within = "transfer",
between = c("train_type", "complete_first"))
summary(test_results)
#   interaction
sum_emm_int <- emmeans(test_results, c("train_type", "transfer"))
transfer_effect <- c(1, 1, -1, -1) #vector comparing complete vs partial transfer
group_effect <- c(1, -1, 1, -1) #vector comparing low switch vs high switch
interaction_effects<-transfer_effect * group_effect #multiply vectors
contrast(sum_emm_int, list(interaction_effects)) #perform contrasts analyses
#   simple effects
low_switch_transfer_effect <- c(0, 1, 0, -1) #comparing accuracies for low-switch only
high_switch_transfer_effect <- c(1, 0, -1, 0) #comparing accuracies for high-switch only
complete_transfer_effect <- c(1, -1, 0, 0) # comparing between groups on stay trials
partial_transfer_effect <- c(0, 0, 1, -1) # comparing  between groups on sitch trials
simple_effect_contrasts <- list(low_switch_transfer_effect,
high_switch_transfer_effect,
complete_transfer_effect,
partial_transfer_effect
)
contrast(sum_emm_int, simple_effect_contrasts) #contrasts analyses for simple effects
#   mean and sd
test_data %>%
group_by(train_type, transfer) %>%
summarise(mean = mean(general_errors),
sd = sd(general_errors),
variance = var(general_errors))
#   correlation test for low switch group
cor_test_data_low <- test_data %>% filter(transfer == "partial", train_type == "low")
with(cor_test_data_low, cor.test(x=mu_tp, y=accuracy))
#   correlation test for high switch group
cor_test_data_high <- test_data %>% filter(transfer == "partial", train_type == "high")
with(cor_test_data_high, cor.test(x=mu_tp, y=accuracy))
test_data_k4 <- test_data %>% filter(k4_onset != Inf)
length(unique(test_data_k4$sub))
test_results <- aov_ez("sub", "k4_onset", test_data_k4, within = "transfer",
between = c("train_type", "complete_first"))
summary(test_results)
#   interaction effect
sum_emm_int <- emmeans(test_results, c("train_type", "transfer"))
transfer_effect <- c(1, 1, -1, -1) #vector comparing complete vs partial transfer
group_effect <- c(1, -1, 1, -1) #vector comparing low switch vs high switch
interaction_effects<-transfer_effect * group_effect #multiply vectors
contrast(sum_emm_int, list(interaction_effects)) #perform contrasts analyses
#   simple effects
low_switch_transfer_effect <- c(0, 1, 0, -1)
high_switch_transfer_effect <- c(1, 0, -1, 0)
complete_transfer_effect <- c(1, -1, 0, 0)
partial_transfer_effect <- c(0, 0, 1, -1)
simple_effect_contrasts <- list(low_switch_transfer_effect, #simple effects
high_switch_transfer_effect,
complete_transfer_effect,
partial_transfer_effect
)
contrast(sum_emm_int, simple_effect_contrasts) #contrasts analyses for simple effects
#   mean and sd
test_means <- test_data_k4 %>%
group_by(train_type, transfer) %>%
summarise(mean_k4 = mean(k4_onset),
sd = sd(k4_onset))
test_means
#| echo: false
options(width=1000)
library(tidyverse)
library(ez)
library(emmeans)
library(afex)
afex_options(emmeans_model = "multivariate")
setwd('../')
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
data <- read.csv(file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = "")))
data <- data %>% rename(complete_first = full_transfer_first)
View(data)
data %>%
filter(ses==2 | ses==3) %>%
select(sub, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = factor(train_type, levels = c("low", "high")))
data %>%
filter(ses==2 | ses==3) %>%
select(sub, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low",train_type==1~"high"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
data %>%
filter(ses==2) %>%
select(sub, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low switch",train_type==1~"high switch"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
data %>%
filter(ses==2 | ses==3) %>%
select(sub, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low",train_type==1~"high"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
data <- data %>%
filter(ses==2 | ses==3) %>%
select(sub, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low",train_type==1~"high"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
training_data <- data %>% filter(ses==2)
setwd('../')
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
data <- read.csv(file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = "")))
data <- data %>% rename(complete_first = full_transfer_first)
data <- data %>%
filter(ses==2 | ses==3) %>%
select(sub, ses, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low",train_type==1~"high"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
training_data <- data %>% filter(ses==2)
#| echo: false
options(width=1000)
library(tidyverse)
library(ez)
library(emmeans)
library(afex)
afex_options(emmeans_model = "multivariate")
setwd('../')
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
data <- read.csv(file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = "")))
data <- data %>% rename(complete_first = full_transfer_first)
data <- data %>%
filter(ses==2 | ses==3) %>%
select(sub, ses, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low",train_type==1~"high"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
training_data <- data %>% filter(ses==2)
training_results <- aov_ez("sub", "context_changes", training_data, within = "switch",
between = c("train_type"), fun_aggregate = mean)
summary(training_results)
sum_emm_int <- emmeans(training_results, c("train_type", "switch")) #get est. marginal means
switch_effect <- list(c(-1, -1, 1, 1)) #make a vector comparing switch vs stay trials
contrast(sum_emm_int, switch_effect) #perform contrasts analyses for main effects
training_data %>%
group_by(switch) %>%
summarise(means = mean(context_changes),
sd = sd(context_changes))
test_results <- aov_ez("sub", "accuracy", test_data, within = "switch",
between = c("train_type"))
#| echo: false
options(width=1000)
library(tidyverse)
library(ez)
library(emmeans)
library(afex)
afex_options(emmeans_model = "multivariate")
setwd('../')
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
data <- read.csv(file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = "")))
data <- data %>% rename(complete_first = full_transfer_first)
data <- data %>%
filter(ses==2 | ses==3) %>%
select(sub, ses, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low",train_type==1~"high"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
training_data <- data %>% filter(ses==2)
training_results <- aov_ez("sub", "context_changes", training_data, within = "switch",
between = c("train_type"), fun_aggregate = mean)
summary(training_results)
sum_emm_int <- emmeans(training_results, c("train_type", "switch")) #get est. marginal means
switch_effect <- list(c(-1, -1, 1, 1)) #make a vector comparing switch vs stay trials
contrast(sum_emm_int, switch_effect) #perform contrasts analyses for main effects
training_data %>%
group_by(switch) %>%
summarise(means = mean(context_changes),
sd = sd(context_changes))
test_data <- data %>% filter(ses==3)
test_results <- aov_ez("sub", "accuracy", test_data, within = "switch",
between = c("train_type"))
print(summary(test_results))
#   interaction
sum_emm_int <- emmeans(test_results, c("train_type", "switch"))
switch_effect <- c(1, 1, -1, -1)
group_effect <- c(1, -1, 1, -1)
interaction_effects<- switch_effect * group_effect
contrast(sum_emm_int, list(interaction_effects))
#   simple effects
low_switch_effect <- c(0, 1, 0, -1)
high_switch_effect <- c(1, 0, -1, 0)
stay_effect <- c(1, -1, 0, 0)
switch_effect <- c(0, 0, 1, -1)
simple_effect_contrasts <- list(low_switch_effect,
high_switch_effect,
stay_effect,
switch_effect
)
contrast(sum_emm_int, simple_effect_contrasts)
test_data %>%
group_by(train_type, switch) %>%
summarise(mean_acc = mean(accuracy),
sd = sd(accuracy),
variance = var(accuracy))
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
library(zeallot) #unpack/destructure with %<-%
source(file.path("src", "get_subs.R"))
source(file.path("src", "get_switch.R"))
source(file.path("src", "get_data.R"))
source(file.path("src","get_setting_stability.R"))
source(file.path("src","get_transition_probabilities.R"))
source(file.path("src","get_learned_doors.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn","ses-train","ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), subses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), door_oc = integer(), on = numeric(), off = numeric(),
switch = integer(), train_type = integer(), transfer = integer(), full_transfer_first = integer(),
original_house = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
if (exp=="exp_lt" && sub=="sub-64" && ses=="ses-learn"){
print("skipping missing data")
}else{
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors) # load and format raw data
grp_data <- rbind(grp_data, data) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
}
# track whether context-incorrect clicks in the test phase land on doors that were learned in the train phase
if(exp=="exp_lt"){
door_lc <- get_learned_doors(grp_data)
grp_data <- grp_data %>% add_column(door_lc = door_lc, .after="door_oc")
}else{
grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
}
# track when they changed context into the correct or other context's door set
select_context <- get_setting_stability(grp_data)
grp_data <- grp_data %>% add_column(select_cc = select_context$s_cc,select_oc = select_context$s_oc, select_oc_late = select_context$s_oc_late, select_total = select_context$s_total, select_cumulative = select_context$s_cumulative,.after="door_lc")
grp_data <- grp_data %>% mutate(door_nc = case_when(door_cc==1 ~ 0, door_oc == 1 ~ 0, .default=1), .after="door_oc")
# save the formatted data
fnl <- file.path(project_path, "res", paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
write_csv(grp_data, fnl)
### extract accuracy and response time averages from event data
# by trial
res <- grp_data %>%
group_by(sub, ses, subses, t, context, train_type, transfer, full_transfer_first, original_house) %>%
summarise(
switch = max(switch), n_clicks = n(), n_cc = sum(door_cc), n_oc = sum(door_oc), n_lc = sum(door_lc), n_nc = sum(door_nc),
setting_sticks = select_oc[1],
setting_slips = max(select_oc_late),
context_changes = sum(select_cc)+sum(select_oc),
accuracy = n_cc / n_clicks,
setting_errors = n_oc / n_clicks,
general_errors = n_nc / n_clicks,
learned_setting_errors = n_lc / n_clicks
)
res$context_changes[intersect(which(res$switch==1),which(res$ses==2))] <- res$context_changes[intersect(which(res$switch==1),which(res$ses==2))]-1
rt <- grp_data %>%
group_by(sub, ses, subses, t, context, train_type, transfer) %>%
filter(door_cc == 1) %>%
summarise(rt = min(off)) # time to first correct click offset
res$rt <- rt$rt
res$win <- 4-res$n_clicks >= 0
# trim RTs
if (exp=="exp_ts"){
res <- res %>% filter(rt<=10) %>% ungroup() %>% group_by(ses,context,switch) %>% filter(rt<=(mean(rt)+(3*sd(rt))))
}
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# by subject
#   grouping by subsession
res <- res %>%
group_by(sub, ses, subses, context, switch, train_type, transfer, full_transfer_first, original_house) %>%
summarise_all(mean)
res <- res %>% ungroup() %>% mutate(transition_probabilities = c(kronecker(matrix(1, nrow(res), 1), NA)))
if(exp=="exp_lt"){
res$transition_probabilities[which(res$ses==2)] <- get_transition_probabilities(grp_data)
}
res <- res %>% select(!t)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg-ss", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
#   just grouping by session
res <- res %>%
group_by(sub, ses, context, switch, train_type, transfer, full_transfer_first, original_house) %>%
summarise_all(mean)
res <- res %>% ungroup() %>% mutate(transition_probabilities = c(kronecker(matrix(1, nrow(res), 1), NA)))
if(exp=="exp_lt"){
res$transition_probabilities[which(res$ses==2)] <- get_transition_probabilities(grp_data)
}
res <- res %>% select(!subses)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
#| echo: false
options(width=1000)
library(tidyverse)
library(ez)
library(emmeans)
library(afex)
afex_options(emmeans_model = "multivariate")
setwd('../')
project_path <- getwd()
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
data <- read.csv(file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = "")))
data <- data %>% rename(complete_first = full_transfer_first)
data <- data %>%
filter(ses==2 | ses==3) %>%
select(sub, ses, train_type, context, switch, setting_sticks, setting_slips, context_changes, accuracy, general_errors, setting_errors, rt) %>%
mutate(train_type = train_type-1) %>%
mutate(sub = factor(sub),
train_type = case_when(train_type==0~"low",train_type==1~"high"),
train_type = factor(train_type),
switch = case_when(switch==0~"stay",switch==1~"switch"),
switch = factor(switch))
training_data <- data %>% filter(ses==2)
training_results <- aov_ez("sub", "context_changes", training_data, within = "switch",
between = c("train_type"), fun_aggregate = mean)
summary(training_results)
sum_emm_int
group_effect <- list(c(-1, 1, -1, 1))
interaction_effect <- switch_effect * group_effect
switch_effect <- list(c(-1, -1, 1, 1))
interaction_effect <- switch_effect * group_effect
switch_effect
group_effect
sum_emm_int <- emmeans(training_results, c("train_type", "switch")) #get est. marginal means
switch_effect <- list(c(-1, -1, 1, 1))
group_effect <- list(c(-1, 1, -1, 1))
interaction_effect <- switch_effect * group_effect
sum_emm_int <- emmeans(training_results, c("train_type", "switch")) #get est. marginal means
switch_effect <- c(-1, -1, 1, 1)
group_effect <- c(-1, 1, -1, 1)
interaction_effect <- switch_effect * group_effect
contrast(sum_emm_int, switch_effect) #perform contrasts analyses for main effects
sum_emm_int <- emmeans(training_results, c("train_type", "switch")) #get est. marginal means
switch_effect <- c(-1, -1, 1, 1)
group_effect <- c(-1, 1, -1, 1)
interaction_effect <- list(switch_effect * group_effect)
contrast(sum_emm_int, interaction_effect)
sum_emm_int <- emmeans(training_results, c("train_type", "switch")) #get est. marginal means
switch_effect <- c(-1, -1, 1, 1)
train_type_effect <- c(-1, 1, -1, 1)
interaction_effect <- list(switch_effect * train_type_effect)
contrast(sum_emm_int, interaction_effect)
training_data %>%
group_by(switch) %>%
summarise(means = mean(context_changes),
sd = sd(context_changes))
training_data %>%
group_by(switch, train_type) %>%
summarise(means = mean(context_changes),
sd = sd(context_changes))
sum_emm_int <- emmeans(training_results, c("train_type", "switch"))
switch_effect <- c(-1, -1, 1, 1)
train_type_effect <- c(-1, 1, -1, 1)
contrast(sum_emm_int, train_type_effect)
sum_emm_int <- emmeans(training_results, c("train_type", "switch"))
switch_effect <- c(-1, -1, 1, 1)
train_type_effect <- c(-1, 1, -1, 1)
contrast(sum_emm_int, list(train_type_effect))
interaction_effect <- list(switch_effect * train_type_effect)
contrast(sum_emm_int, interaction_effect)
sum_emm_int <- emmeans(training_results, c("train_type", "switch"))
switch_effect <- c(-1, -1, 1, 1)
train_type_effect <- c(-1, 1, -1, 1)
interaction_effect <- list(switch_effect * train_type_effect)
contrast(sum_emm_int, interaction_effect)
test_data <- data %>% filter(ses==3)
test_results <- aov_ez("sub", "accuracy", test_data, within = "switch",
between = c("train_type"))
print(summary(test_results))
test_results <- aov_ez("sub", "accuracy", test_data, within = "switch",
between = c("train_type"),
fun_aggregate = mean)
print(summary(test_results))
sum_emm_int
#   interaction
sum_emm_int <- emmeans(test_results, c("train_type", "switch"))
sum_emm_int
switch_effect <- c(1, 1, -1, -1)
group_effect <- c(1, -1, 1, -1)
interaction_effects<- switch_effect * group_effect
contrast(sum_emm_int, list(interaction_effects))
#   simple effects
low_switch_effect <- c(0, 1, 0, -1)
high_switch_effect <- c(1, 0, -1, 0)
stay_effect <- c(1, -1, 0, 0)
switch_effect <- c(0, 0, 1, -1)
simple_effect_contrasts <- list(low_switch_effect,
high_switch_effect,
stay_effect,
switch_effect
)
contrast(sum_emm_int, simple_effect_contrasts)
test_data %>%
group_by(train_type, switch) %>%
summarise(mean = mean(accuracy),
sd = sd(accuracy),
var = var(accuracy))
test_results <- aov_ez("sub", "rt", test_data, within = "switch",
between = c("train_type"),
fun_aggregate = mean)
print(summary(test_results))
sum_emm_int <- emmeans(test_results, c("train_type", "switch"))
sum_emm_int
test_results <- aov_ez("sub", "setting_sticks", test_data, within = "switch",
between = c("train_type"),
fun_aggregate = mean)
print(summary(test_results))
sum_emm_int <- emmeans(test_results, c("train_type", "switch"))
sum_emm_int
test_results <- aov_ez("sub", "setting_slips", test_data, within = "switch",
between = c("train_type"),
fun_aggregate = mean)
print(summary(test_results))
sum_emm_int <- emmeans(test_results, c("train_type", "switch"))
sum_emm_int
test_results <- aov_ez("sub", "general_errors", test_data, within = "switch",
between = c("train_type"),
fun_aggregate = mean)
print(summary(test_results))
sum_emm_int <- emmeans(test_results, c("train_type", "switch"))
sum_emm_int
sum_emm_int <- emmeans(test_results, c("train_type", "switch"))
sum_emm_int
