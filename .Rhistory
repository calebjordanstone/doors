beta_maps <- matrix(NA,4,nrow(strategies))
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
strategy <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(strategy)
# store data
beta_maps[i,1:ncol(beta_maps)] <- beta_map
if (save_plots){
# view alphas and betas over time
points(1:length(strategy),beta_map,type="l",col=colours[i])
}
}
if (save_plots){
dev.off()
}
# format the data
data <- data.frame(sub = integer(), ses = integer(), context = integer(), train_type = integer(), transfer = integer(), event = integer(), k1 = numeric(), k2 = numeric(), k3 = numeric(), k4 = numeric(), win = integer())
for (event in 1:length(beta_map)){
win <- which(beta_maps[1:nrow(beta_maps),event] == max(beta_maps[1:nrow(beta_maps),event]))
if (sum(beta_maps[1:nrow(beta_maps),event])==0){win <- NA}
tmp <- data.frame(sid, ses, context, transfer, train_type, event, k1 = beta_maps[1,event], k2 = beta_maps[2,event], k3 = beta_maps[3,event], k4 = beta_maps[4,event], win)
data <- rbind(data,tmp)
}
last_strategy_change <- max(which(diff(data$win)!=0))+1
data <- data %>%
mutate(stable_k4 = case_when(event < last_strategy_change ~ 0, event %in% intersect(which(event >= last_strategy_change), which(win == 4)) ~ 1, .default = NA))
group_data <- rbind(group_data,data)
}
}
}
# threshold ---------------------------------------------------------------
results <- group_data %>% group_by(sid,ses,context,train_type,transfer) %>% summarise(nclicks = n(),k4_onset = min(which(stable_k4==1)))
}
write.csv(group_data,file.path('res',paste(paste(exp,'maggi-map',sep='_'),'csv', sep='.')))
write.csv(results,file.path('res',paste(paste(exp,'maggi-k4',sep='_'),'csv', sep='.')))
results_wide <- results %>% filter(ses==1) %>% rename(k4_learn=k4_onset)
results_wide$k4_test <- results %>% filter(ses==3) %>% pull(k4_onset)
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
# settings
exp <- "exp_lt" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
# data
project_path <- getwd()
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
View(res)
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
# data
project_path <- getwd()
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>% select(sub,ses,context,switch,accuracy,setting_errors,win,context_changes) %>% pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy-type", values_to = "score")
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
# data
project_path <- getwd()
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>% pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy-type", values_to = "score")
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>% pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin()
res <- group_by(sub,ses,context,switch) %>%
summarise_all(zscore)
res <- res %>% group_by(sub,ses,context,switch) %>%
summarise_all(zscore)
? zscore
zscore <- function(data){
z <- (data - mean(data))/sd(data)
return(z)
}
res <- res %>% group_by(sub,ses,context,switch) %>%
summarise_all(zscore)
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>% pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
View(res)
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin()
View(res)
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
group_by(sub,ses,context,switch) %>%
summarise_all(scale) %>%
ungroup() %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
group_by(sub,ses,context,switch) %>%
summarise_all(scale)
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
group_by(sub,ses,context,switch) %>%
summarise_all(scale)
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin()
View(res)
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
### sources
library(tidyverse)
source(file.path(getwd(), "src", "get_subs.R"))
source(file.path(getwd(), "src", "get_switch.R"))
source(file.path(getwd(), "src", "get_data.R"))
source(file.path(getwd(), "src", "get_context_changes.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01" # pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn","ses-train","ses-test") # session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), on = numeric(), off = numeric(), subses = integer(), door_oc = integer(),
switch = integer(), train_type = integer(), transfer = integer(), full_transfer_first = integer(),
original_house = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors) # load and format raw data
grp_data <- rbind(grp_data, data) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
# save the formatted data
fnl <- file.path(project_path, "res", paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
write_csv(grp_data, fnl)
### extract accuracy and response time averages from event data
# by trial
res <- grp_data %>%
group_by(sub, ses, t, context, train_type, transfer, full_transfer_first, original_house) %>%
summarise(
switch = max(switch), n_clicks = n(), n_cc = sum(door_cc), n_oc = sum(door_oc),
accuracy = n_cc / n_clicks,
setting_errors = n_oc / n_clicks
)
rt <- grp_data %>%
group_by(sub, ses, t, context, train_type, transfer) %>%
filter(door_cc == 1) %>%
summarise(rt = min(off)) # time to first correct click offset
res$rt <- rt$rt
# add accuracy calculated the way it was for points during the task
win <- 4-res$n_clicks >= 0
res$win <- win
# record the number of times they switch between door_cc, door_oc, and door_nc on each trial.
# if it's a non-switch trial, assume that they're coming from door_cc. if it's a switch, assume that they're coming from door_oc.
grp_data <- grp_data %>% mutate(door_nc = case_when(door_cc==1 ~ 0, door_oc == 1 ~ 0, .default=1))
res$context_changes <- scale(get_context_changes(grp_data))
x <- get_context_changes(grp_data)
View(get_context_changes)
dat <- grp_data
data <- grp_data
nswitches <- c()
for (s in unique(data$sub)){
print(s)
for (ss in unique(data$ses)){
print(ss)
tmp <- data %>% filter(sub==s,ses==ss)
for (trial in unique(tmp$t)){
print(t)
data <- tmp %>% filter(t==trial)
switch <- data$switch[[1]]
if(switch==0){
door_cc <- c(1,data$door_cc)
door_oc <- c(0,data$door_oc)
}else if(switch==1){
door_cc <- c(0,data$door_cc)
door_oc <- c(1,data$door_oc)
}
door_nc <- c(0,data$door_nc)
cc_switches <- diff(door_cc)
oc_switches <- diff(door_oc)
nc_switches <- diff(door_nc)
switches <- data.frame(cc_switches,oc_switches,nc_switches)
switches <- switches %>% mutate(switch = case_when(cc_switches==1~1,oc_switches==1~1,nc_switches==1~1,.default=0))
if(switch==1){
nswitches <- c(nswitches, sum(switches$switch)-1)
}else{
nswitches <- c(nswitches,sum(switches$switch))
}
}
}
}
View(data)
data <- grp_data
unique(data$sub)
unique(data$ses)
nswitches <- c()
for (s in unique(grp_data$sub)){
for (ss in unique(grp_data$ses)){
tmp <- grp_data %>% filter(sub==s,ses==ss)
for (trial in unique(tmp$t)){
data <- tmp %>% filter(t==trial)
switch <- data$switch[[1]]
if(switch==0){
door_cc <- c(1,data$door_cc)
door_oc <- c(0,data$door_oc)
}else if(switch==1){
door_cc <- c(0,data$door_cc)
door_oc <- c(1,data$door_oc)
}
door_nc <- c(0,data$door_nc)
cc_switches <- diff(door_cc)
oc_switches <- diff(door_oc)
nc_switches <- diff(door_nc)
switches <- data.frame(cc_switches,oc_switches,nc_switches)
switches <- switches %>% mutate(switch = case_when(cc_switches==1~1,oc_switches==1~1,nc_switches==1~1,.default=0))
if(switch==1){
nswitches <- c(nswitches, sum(switches$switch)-1)
}else{
nswitches <- c(nswitches,sum(switches$switch))
}
}
}
}
x <- scale(nswitches)
View(x)
res$context_changes <- x
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
View(res)
res$context_changes <- x[[1]]
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# by subject
res <- res %>%
group_by(sub, ses, context, switch, train_type, transfer, full_transfer_first, original_house) %>%
summarise_all(mean)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# lydia barnes, august 2024
# compares four types of accuracy
#   "accuracy": number of current-context clicks / total number of clicks
#   "setting_errors": number of other-context clicks / total number of clicks
#   "win": whether they reached the target in four clicks or fewer
#   "context_changes": how many times they moved between contexts
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
# data
project_path <- getwd()
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
# plot
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin() +
# add a 95% confidence interval
stat_summary(
aes(x = train_type, y = accuracy, colour = factor(ses)),
fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
# and a mean
stat_summary(
aes(x = train_type, y = accuracy, colour = transfer),
fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1
) +
# tidy
theme_minimal() +
scale_color_lancet(
name = "Transfer Type",
labels = c("Full","Partial")) + #c("Non-Switch", "Switch")) +
scale_x_discrete(labels = c("Low Switch", "High Switch")) +
labs(title = "", x = "Training Group", y = "Accuracy (%)") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin()
View(res)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res$context_changes <- x[[1]]
res$context_changes <- nswitches
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res$context_changes <- nswitches
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
# by subject
res <- res %>%
group_by(sub, ses, context, switch, train_type, transfer, full_transfer_first, original_house) %>%
summarise_all(mean)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
write_csv(res, fnl)
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin()
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin() +
# add a 95% confidence interval
stat_summary(fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2)
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
mutate(context_changes = context_changes-mean(context_changes)) %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin() +
stat_summary(fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1) +
theme_minimal() +
scale_color_lancet(
name = "Trial Type",
labels = c("Non-Switch","Switch")) +
scale_x_discrete(labels = c("Accuracy", "Context Changes", "Setting Errors", "Win")) +
labs(title = "", x = "Accuracy Type", y = "Score") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
mutate(context_changes = (context_changes-mean(context_changes))/sd(context_changes)) %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin() +
stat_summary(fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1) +
theme_minimal() +
scale_color_lancet(
name = "Trial Type",
labels = c("Non-Switch","Switch")) +
scale_x_discrete(labels = c("Accuracy", "Context Changes", "Setting Errors", "Win")) +
labs(title = "", x = "Accuracy Type", y = "Score") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
# lydia barnes, august 2024
# compares four types of accuracy
#   "accuracy": number of current-context clicks / total number of clicks
#   "setting_errors": number of other-context clicks / total number of clicks
#   "win": whether they reached the target in four clicks or fewer
#   "context_changes": how many times they moved between contexts
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
# data
project_path <- getwd()
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>% select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
mutate(context_changes = (context_changes-mean(context_changes))/sd(context_changes)) %>%
mutate(accuracy = (accuracy-mean(accuracy))/sd(accuracy)) %>%
mutate(setting_errors = (setting_errors-mean(setting_errors))/sd(setting_errors)) %>%
mutate(win = (win-mean(win))/sd(win)) %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
# plot
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin() +
stat_summary(fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1) +
theme_minimal() +
scale_color_lancet(
name = "Trial Type",
labels = c("Non-Switch","Switch")) +
scale_x_discrete(labels = c("Accuracy", "Context Changes", "Setting Errors", "Win")) +
labs(title = "", x = "Accuracy Type", y = "Score") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
fnl <- file.path(project_path, "fig", paste(paste(exp, "accuracy-types", sep = "_"), ".pdf", sep = ""))
ggsave(fnl, plot = last_plot(), width=20, height=15)
fnl <- file.path(project_path, "fig", paste(paste(exp, "accuracy-types", sep = "_"), ".pdf", sep = ""))
ggsave(fnl, plot = last_plot(), width=10, height=8)
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin() +
stat_summary(fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1) +
theme_minimal() +
scale_color_lancet(
name = "Trial Type",
labels = c("Non-Switch","Switch")) +
scale_x_discrete(labels = c("Accuracy", "Context Changes", "Setting Errors", "Win")) +
labs(title = "", x = "Accuracy Type", y = "Z-Score") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
fnl <- file.path(project_path, "fig", paste(paste(exp, "accuracy-types", sep = "_"), ".pdf", sep = ""))
ggsave(fnl, plot = last_plot(), width=12, height=8)
# lydia barnes, august 2024
# compares four types of accuracy
#   "accuracy": number of current-context clicks / total number of clicks
#   "setting_errors": number of other-context clicks / total number of clicks
#   "win": whether they reached the target in four clicks or fewer
#   "context_changes": how many times they moved between contexts
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
label_sz <- 20
mk_sz <- 2
# data
project_path <- getwd()
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- res %>%
filter(ses==2) %>%
select(c(sub,ses,context,switch,accuracy,setting_errors,win,context_changes)) %>%
mutate(context_changes = (context_changes-mean(context_changes))/sd(context_changes)) %>%
mutate(accuracy = (accuracy-mean(accuracy))/sd(accuracy)) %>%
mutate(setting_errors = (setting_errors-mean(setting_errors))/sd(setting_errors)) %>%
mutate(win = (win-mean(win))/sd(win)) %>%
pivot_longer(!c(sub,ses,context,switch), names_to = "accuracy_type", values_to = "score")
# plot
res %>%
ggplot(aes(x = accuracy_type, y = score, colour = factor(switch))) +
geom_violin() +
stat_summary(fun.data = "mean_cl_normal",geom = "pointrange", position = position_dodge(width = .9), linewidth = 1, size = mk_sz/2) +
stat_summary(fun = "mean", geom = "line", position = position_dodge(width = 0.9), linewidth = 1, alpha = 1) +
theme_minimal() +
scale_color_lancet(
name = "Trial Type",
labels = c("Non-Switch","Switch")) +
scale_x_discrete(labels = c("Accuracy", "Context Changes", "Setting Errors", "Win")) +
labs(title = "", x = "Accuracy Type", y = "Z-Score") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
fnl <- file.path(project_path, "fig", paste(paste(exp, "accuracy-types", sep = "_"), ".pdf", sep = ""))
ggsave(fnl, plot = last_plot(), width=12, height=8)
View(res)
