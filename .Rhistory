p <- res %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = reclicks, y = accuracy, colour = factor(subses)), alpha = 0.8, size = 15) +
geom_text(aes(x = reclicks,
y = accuracy, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0, 8.5) + labs(title = "Switch trial re-clicks by stay trial accuracy",
x = "Re-clicks", y = "Accuracy", colour = "Half of session") + scale_colour_brewer(palette = "Greens",
labels = unique(res$subses)) + theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "reclicks", paste("context",
ctx, sep = "-"), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = p)
res %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy, colour = factor(subses)), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0, 8.5) + labs(title = "Excess distance travelled by accuracy",
x = "Excess distance", y = "Accuracy", colour = "Half of session") + scale_colour_brewer(palette = "Greens",
labels = unique(res$subses)) + theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
res %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy, colour = factor(subses)), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0, 10.5) + labs(title = "Excess distance travelled by accuracy",
x = "Excess distance", y = "Accuracy", colour = "Half of session") + scale_colour_brewer(palette = "Greens",
labels = unique(res$subses)) + theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
res %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy, colour = factor(subses)), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0, 20.5) + labs(title = "Excess distance travelled by accuracy",
x = "Excess distance", y = "Accuracy", colour = "Half of session") + scale_colour_brewer(palette = "Greens",
labels = unique(res$subses)) + theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
View(res)
res %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy, colour = factor(subses)), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.5, 2.5) + labs(title = "Excess distance travelled by accuracy",
x = "Excess distance", y = "Accuracy", colour = "Half of session") + scale_colour_brewer(palette = "Greens",
labels = unique(res$subses)) + theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
res %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy, colour = factor(subses)), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.5, 2.5) + labs(title = "Excess distance travelled by accuracy",
x = "Excess distance (a.u.)", y = "Accuracy", colour = "Half of session") + scale_colour_brewer(palette = "Greens",
labels = unique(res$subses)) + theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""))
stereo <- read_csv(fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv",
sep = ""))
avg <- read_csv(fnl)
stereo <- stereo %>% group_by(sub,ses,context) %>% summarise(accuracy = mean(accuracy),match_hp = mean(match_hp),match_tsp=mean(match_tsp),overshoot_tsp=mean(overshoot_tsp),overshoot_hp=mean(overshoot_hp)) # collapse stereo across subsessions
avg <- avg %>% filter(ses==3)
stereo$accuracy_test <- avg$accuracy # add test accuracy to stereo results
View(avg)
avg <- avg %>% filter(ses==3,switch==0)
stereo$accuracy_test <- avg$accuracy # add test accuracy to stereo results
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.5, 2.5) + labs(title = "Excess distance travelled during training by test accuracy",
x = "Excess distance (a.u.)", y = "Test accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.5, 2.5) + labs(title = "Train excess distance by test accuracy",
x = "Excess distance (a.u.)", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.5, 2.5) + labs(title = "Train excess distance by test accuracy",
x = "Excess distance (a.u.)", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.5, 1.5) + labs(title = "Train excess distance by test accuracy",
x = "Excess distance (a.u.)", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Train excess distance by test accuracy",
x = "Excess distance (a.u.)", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "Shortest path match (train) by accuracy (test)",
x = "Shortest path match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "TSP match (train) by accuracy (test)",
x = "TSP match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
p <- stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = match_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = match_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,1.1) + labs(title = "TSP match (train) by accuracy (test)",
x = "TSP match", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "tsp", paste("context",
ctx, sep = "-"), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = p)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
stereo <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv", sep = ""))
write_csv(stereo, fnl)
View(path_match)
### sources
library(tidyverse)
library(ggthemes)
library(ggExtra)
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
ctx <- 2
# figure settings
title_sz <- 30
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""))
stereo <- read_csv(fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv",
sep = ""))
avg <- read_csv(fnl)
stereo <- stereo %>% group_by(sub,ses,context) %>% summarise(accuracy = mean(accuracy),match_hp = mean(match_hp),match_tsp=mean(match_tsp),overshoot_tsp=mean(overshoot_tsp),overshoot_hp=mean(overshoot_hp)) # collapse stereo across subsessions
avg <- avg %>% filter(ses==3,switch==0)
stereo$accuracy_test <- avg$accuracy # add test accuracy to stereo results
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,20.1) + labs(title = "Path overshoot (train) by accuracy (test)",
x = "Path overshoot", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
View(stereo)
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0,2.1) + labs(title = "Path overshoot (train) by accuracy (test)",
x = "Path overshoot", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.1,2.1) + labs(title = "Path overshoot (train) by accuracy (test)",
x = "Path overshoot", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
p <- stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_tsp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_tsp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.1,2.1) + labs(title = "Path overshoot (train) by accuracy (test)",
x = "Path overshoot", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "tsp", paste("context",
ctx, sep = "-"), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = p)
stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.1,2.1) + labs(title = "Path overshoot (train) by accuracy (test)",
x = "Path overshoot", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
p <- stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = overshoot_hp, y = accuracy_test), alpha = 0.8, size = 15) +
geom_text(aes(x = overshoot_hp,
y = accuracy_test, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(-0.1,2.1) + labs(title = "Path overshoot (train) by accuracy (test)",
x = "Path overshoot", y = "Accuracy") +
theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "hp", paste("context",
ctx, sep = "-"), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = p)
### sources
library(tidyverse)
library(ggthemes)
library(ggExtra)
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
ctx <- 1
# figure settings
title_sz <- 30
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""))
stereo <- read_csv(fnl)
### transitions
p <- stereo %>%
filter(ses == 2, context == ctx) %>%
ggplot() + geom_point(aes(x = transition_counts, y = accuracy, colour = factor(subses)), alpha = 0.8, size = 15) +
geom_text(aes(x = transition_counts,
y = accuracy, label = sub), alpha = 0.8, size = 8, position = position_jitter(width = 0.1, height = 0.05)) +
theme_minimal(base_size = label_sz, base_family = "Roboto") + ylim(0, 1.1) + xlim(0.5, 4.5) + labs(title = "Transitions by accuracy during training",
x = "Transitions", y = "Accuracy", colour = "Half of session") + scale_colour_brewer(palette = "Greens",
labels = unique(stereo$subses)) + theme(panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white"))
# p <- ggMarginal(p)
fnl <- file.path(project_path, "fig", paste(paste(version, exp, mes, "transitions", paste("context",
ctx, sep = "-"), sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = p)
### sources
library(tidyverse)
library(ggthemes)
library(ggExtra)
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
ctx <- 1
# figure settings
title_sz <- 30
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""))
View(stereo)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""))
stereo <- read_csv(fnl)
renv::checkout()
### sources
library(tidyverse)
library(ggthemes)
library(ggExtra)
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
ctx <- 1
# figure settings
title_sz <- 30
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""))
stereo <- read_csv(fnl)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
stereo <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv", sep = ""))
write_csv(stereo, fnl)
View(data)
### sources
library(tidyverse)
library(ggthemes)
library(ggExtra)
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
ctx <- 1
# figure settings
title_sz <- 30
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""))
stereo <- read_csv(fnl)
View(stereo)
source("~/Documents/academe/projects/doors/src-stereo/plot_stereo.R", echo=TRUE)
rlang::last_trace()
source("~/Documents/academe/projects/doors/src-stereo/plot_stereo.R", echo=TRUE)
source("~/Documents/academe/projects/doors/src-stereo/plot_stereo.R", echo=TRUE)
View(stereo_avg)
View(stereo)
stereo_avg$accuracy_test <-
avg %>% filter(ses == 3, switch == 0) %>% pull(accuracy) # add test accuracy to stereo results
View(stereo_avg)
source("~/Documents/academe/projects/doors/src-stereo/plot_stereo.R", echo=TRUE)
View(stereo_avg)
View(avg)
install.packages("lintr")
lintr::lint_dir(type = "tidyverse")
lintr::lint_dir()
install.packages("styler")
styler::style_dir()
lintr::lint_dir()
renv::checkout()
styler::style_dir()
lintr::lint_dir()
lintr::lint_dir()
renv::status()
?renv::status
renv::checkout()
renv::checkout()
renv::snapshot()
renv::status()
styler::style_dir()
lintr::lint_dir()
lintr::lint_dir()
use_lintr()
lintr::use_lintr()
lintr::lint_dir()
lintr::lint_dir()
lintr::lint_dir()
lintr::lint_dir()
lintr::lint_dir()
lintr::lint_dir()
lintr::lint("./src-paths/format_paths.R")
lintr::clear_cache()
lintr::lint("./src-paths/format_paths.R")
lintr::lint("./src-paths/format_paths.R")
lintr::lint("./src-paths/format_paths.R")
lintr::lint_dir()
