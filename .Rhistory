}
View(plt)
plt <- list()
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
labs(
title = "Observed Paths", x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
plt <- list.append(plt,x)
}
plt <- rbind(plt,x)
View(plt)
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
labs(
title = "Observed Paths", x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
plt <- rbind(plt,x)
}
plt[1]
plt[[1]]
plt[[1]][[1]]
plt <- data.frame()
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
labs(
title = "Observed Paths", x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
plt <- rbind(plt,x)
}
plt
plt.plt
plt['plt']
plt[1,:]
plt[1]
plt[2]
plt[2][1]
plt[2][[1]]
plt[[2]][[1]]
tmp <- plt[1]
View(tmp)
tmp <- plt[[1]]
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
labs(
title = "Observed Paths", x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
if (ctx==1){a <- tmp}else{b <- tmp}
}
ggarrange(a,b)
if(!require(devtools)) install.packages("devtools")
install.packages("ggpubr")
library(ggpubr)
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
labs(
title = "Observed Paths", x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
if (ctx==1){a <- tmp}else{b <- tmp}
}
ggarrange(a,b)
ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
)
ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
)
ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
View(opt)
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx)
View(optimal)
algs <- c("hamniltonian","travelling") # shortest path algorithm: 'hp' (hamiltonian path) or 'tsp' (travelling salesperson)
algs <- c("hamniltonian")
algs <- c("hamiltonian","travelling") # shortest path algorithm: 'hp' (hamiltonian path) or 'tsp' (travelling salesperson)
alg <- algs[1]
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
)
ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
)
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = "Observed Paths", x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
if (ctx==1){a <- tmp}else{b <- tmp}
}
ggarrange(a,b)
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Context %d",ctx), x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
if (ctx==1){a <- tmp}else{b <- tmp}
}
ggarrange(a,b)
for (sub in subs){
sid <- as.numeric(substring(sub,5,7))
for (alg in algs){
for (ctx in contexts){
# filter to just this subject, context, and algorithm
opt <- optimal %>%
filter(sub == sid, algorithm == alg, context == ctx) %>%
mutate(solution_factor = factor(solution))
# set grid colours based on current and other context
colours <- rep("white", 16)
idx <- unique(opt$door)
colours[idx] <- "lightgrey"
opt_other <- optimal %>%
filter(sub == sid, algorithm == alg, context != ctx) %>%
mutate(solution_factor = factor(solution))
idx <- unique(opt_other$door)
colours[idx] <- "darkgrey"
# make the figure
tmp <- ggplot() +
geom_tile(
data = doors, aes(x = xloc, y = yloc, fill = id, colour = "white"), show.legend = FALSE,
width = 0.9, height = 0.9, alpha = 1, col = "black"
) +
geom_text(
data = doors, aes(x = xloc, y = yloc, label = id),
size = 10
) +
geom_path(
data = opt, aes(x = x, y = y, group = solution_factor), linewidth = 2, linejoin = "mitre",
lineend = "butt", position = position_jitter(width = 0.1, height = 0.1), alpha = 0.8, arrow = arrow(
angle = 15,
type = "closed"
)
) +
theme_minimal() +
ylim(0.5, 4.5) +
xlim(
0.5,
4.5
) +
scale_fill_gradientn(colours = colours, guide = "none") +
labs(
title = sprintf("Context %d",ctx), x = "Door Position (x)",
y = "Door Position (y)"
) +
theme(
plot.title = element_text(size = title_sz), axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz), axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
if (ctx==1){a <- tmp}else{b <- tmp}
}
# make multi-panel
ggarrange(a,b)
# save it
fnl <- file.path(project_path, "fig", paste( paste(version, exp, mes, alg, sub, sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot())
}
}
