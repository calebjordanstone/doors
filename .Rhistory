# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
View(events)
i=4
j <- 3
these_doors <- NA
while (1){
if(j>=i){break}
pdata <- events[(i-j):i,]
these_doors <- unique(pdata$door)
j <- j+1
if(length(these_doors)>=4){break}
}
correct <- which(!is.na(match(these_doors,doors)))
correct
!is_empty(correct)
keep <- correct
for (c in 1:length(correct)){
if(first_feedback[correct[c]]>i){
keep <- keep[-c]
}
}
correct[c]
first_feedback[correct[c]]
first_feedback
doors <- events %>% filter(door_cc==1) %>% pull(door) %>% unique()
target_idx <- c(which(diff(events$t)==1),length(events$door))
targets <- events$door[target_idx]
first_feedback <- rep(0,1,length(doors))
first_feedback_trial <- first_feedback
for (i in 1:length(doors)){
first_feedback[i] <- target_idx[min(which(targets==doors[i]))]
first_feedback_trial[i] <- events$t[first_feedback]
}
keep <- correct
for (c in 1:length(correct)){
if(first_feedback[correct[c]]>i){
keep <- keep[-c]
}
}
correct <- keep
# confirm that there is still something in "correct", and carry on
if(!is_empty(correct)){
# record evidence for one or more strategies
if(competitive){
know_doors[length(correct),i] <- 1
}else{
know_doors[1:length(correct),i] <- 1
}
}
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=FALSE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=TRUE)
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_event",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
length(which(!is.na(match(these_doors,those_doors))))
length(which(!is.na(match(these_doors,those_doors))))+1
nstrategies
length(which(!is.na(match(these_doors,those_doors))))+1:nstrategies
(length(which(!is.na(match(these_doors,those_doors))))+1):nstrategies
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
View(strategies)
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=FALSE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
beta_map
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
data
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
alphas
betas
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=FALSE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=FALSE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=FALSE,evaluate_all=TRUE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
# lydia barnes, may 2024
# applies maggi algorithm. algorithm estimates probability of using a given strategy, weighting by recency.
library(zeallot) #unpack/destructure with %<-%
source(file.path(getwd(), "src-learn", "get_maggi.R"))
source(file.path(getwd(), "src-learn", "format_data_for_maggi.R"))
set.seed(17)
simulation <- FALSE
if (simulation){
# synthesise data
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
}else{
# read real data
strategies <- format_data_for_maggi(nsub=1,nses=1,ncontext=1,method="by_trial",specific_doors=FALSE,competitive=FALSE,evaluate_all=FALSE)
colours <- c("darkgreen","limegreen","gold","orange")
plot(1:nrow(strategies),rep(0,1,nrow(strategies)),type="l",col="black",ylim=c(0,1))
i <- 0
for (strategy in names(strategies)[2:length(names(strategies))]){
i <- i+1
data <- strategies %>% pull(strategy)
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_map,beta_variance) %<-% get_maggi(data)
# view alphas and betas over time
points(1:length(data),beta_map,type="l",col=colours[i])
}
}
# view the final beta distribution
#increments <- seq(0,1,by=.01)
#plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
