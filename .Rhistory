project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### data
# stereotypy measures from train phase
fnl <-
file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv",
sep = ""
))
stereo <- read_csv(fnl, show_col_types = FALSE)
# general accuracy and response times for all phases
fnl <-
file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv",
sep = ""
))
avg <- read_csv(fnl)
# add test phase accuracy to stereo data frame
stereo_test <-
stereo %>%
group_by(sub, ses, context) %>%
summarise_all(mean)
stereo_test$accuracy_test <-
avg %>%
filter(ses == 3, switch == 0) %>%
pull(accuracy) # add test accuracy to stereo results
stereo_test$context_test <-
avg %>%
filter(ses==3, switch==0) %>%
pull(context)
tmp <- stereo_test %>%
group_by(sub,ses) %>%
summarise_all(mean)
reclicks_avg <- tmp %>% pull(reclicks)
overshoot_avg <- tmp %>% pull(overshoot_tsp)
a <- stereo_test %>%
filter(ses == 2,context_test==1) %>%
ungroup() %>%
select(sub,overshoot_tsp,reclicks,accuracy_test,context_test)
a$reclicks <- reclicks_avg
a$overshoot_tsp <- overshoot_avg
b <- stereo_test %>%
filter(ses==2, context_test==2) %>%
ungroup() %>%
select(sub,overshoot_tsp,reclicks,accuracy_test,context_test)
b$reclicks <- reclicks_avg
b$overshoot_tsp <- overshoot_avg
stereo_test <- bind_rows(a,b)
test_labels <- c("Full Transfer Accuracy", "Partial Transfer Accuracy")
p <- stereo_test %>%
ggplot() +
geom_point(aes(x = overshoot_tsp, y = accuracy_test,
colour = factor(context_test)),
alpha = 0.8,
size = 15
) +
geom_text(
aes(
x = overshoot_tsp,
y = accuracy_test, label = sub
),
alpha = 0.8,
size = 8,
position = position_jitter(width = 0.1, height = 0.05)
) +
theme_minimal(base_size = label_sz, base_family = "Roboto") +
ylim(0.5, 1.1) +
xlim(-0.1, 2.1) +
labs(
title = "Train Overshoot by Test Accuracy",
x = "Path Overshoot", y = "Accuracy", colour = "Test Type"
) +
scale_colour_brewer(
palette = "Greens",
labels = c("Full Transfer","Partial Transfer")
) +
theme(
panel.background = element_rect(fill = "white", colour = "white"),
plot.background = element_rect(fill = "white", colour = "white")
)
fnl <-
file.path(project_path, "fig", paste(paste(
version, exp, mes, "tsp",
sep = "_"
), ".png", sep = ""))
ggsave(fnl, plot = p, width = 14, height = 7)
x <- seq(0,1,by=.1)
plot(x,dbeta(x,10,5))
plot(x,dbeta(x,10,5),type="l")
source("~/Documents/academe/projects/doors/maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/maggi.R", echo=TRUE)
?dbeta
?rbinom
ps <- c(.1, .3, .6, .9)
n <- 25
lapply(ps, rbinom, n=n, size=1)
unlist(lapply(ps, rbinom, n=n, size=1))
i=1
alphas <- rep(0,length(data))
betas <- alphas
s <- alphas
f <- alphas
if(i==1){
s[i] <- data[i]
f[i] <- 1-data[i]
}
data <- unlist(lapply(ps, rbinom, n=n, size=1))
if(i==1){
s[i] <- data[i]
f[i] <- 1-data[i]
}
alphas[i] <- alpha+s[i]
betas[i] <- beta+f[i]
alpha <- 1
beta <- 1
decay <- .9
if(i==1){
s[i] <- data[i]
f[i] <- 1-data[i]
}
alphas[i] <- alpha+s[i]
betas[i] <- beta+f[i]
alpha <- 1
beta <- 1
decay <- .9
ps <- c(.1, .3, .6, .9)
n <- 25
data <- unlist(lapply(ps, rbinom, n=n, size=1))
alphas <- rep(0,length(data))
betas <- alphas
s <- alphas
f <- alphas
if(i==1){
s[i] <- data[i]
f[i] <- 1-data[i]
}
alphas[i] <- alpha+s[i]
betas[i] <- beta+f[i]
1-data[i]
data[i]
plot(x,dbeta(x,alphas[1],betas[1]),type="l")
for (i in 1:length(data)){
if(i==1){
s[i] <- data[i]
f[i] <- 1-data[i]
}else{
s[i] <- decay*s[i-1] + data[i]
f[i] <- decay*f[i-1] + 1-data[i]
}
alphas[i] <- alpha+s[i]
betas[i] <- beta+f[i]
}
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
plot(x,dbeta(x,alphas[length(data)],betas[length(data)]),type="l")
source("~/Documents/academe/projects/doors/maggi.R", echo=TRUE)
source("~/Documents/academe/projects/doors/maggi.R", echo=TRUE)
beta_mean <- alphas / (alphas+betas)
plot(1:length(data),beta_mean,type="l",col="darkred")
(alphas+betas)^2
beta_variance <- alphas*betas / ((alphas+betas)^2 * (alphas+betas+1))
plot(1:length(data),beta_variance,type="l",col="darkorange")
get_maggi <- function(data,...){
args <- list(...)
browser()
}
get_maggi(c(1,2,3),1,2,6)
args
get_maggi <- function(data,alpha=1,beta=1,decay=.9){
browser()
}
get_maggi(c(1,2,3))
get_maggi(c(1,2,3),alpha=2)
source(file.path(getwd(), "src-learn", "get_maggi.R"))
# synthesise data
ps <- c(.1, .3, .6, .9)
n <- 25
data <- unlist(lapply(ps, rbinom, n=n, size=1))
args <- unlist(get_maggi(data))
source(file.path(getwd(), "src-learn", "get_maggi.R"))
# synthesise data
ps <- c(.1, .3, .6, .9)
n <- 25
data <- unlist(lapply(ps, rbinom, n=n, size=1))
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data) #unpack // destructure with %<-%
library(zeallot)
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data) #unpack // destructure with %<-%
renv::snapshot()
source("~/Documents/academe/projects/doors/src-learn/run_maggi.R", echo=TRUE)
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l")
plot(1:length(data),beta_mean,type="l",col="darkred")
points(1:length(data),beta_variance,type="l",col="darkorange")
plot(1:length(data),beta_mean,type="l",col="darkred")
points(1:length(data),beta_variance,type="l",col="darkorange")
plot(1:length(data),beta_variance,type="l",col="darkorange")
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="purple")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
ps <- c(.1, .3, .6, .9) #reasonable steps in the probability of successes over runs of trials
n <- 25 #trials per run
data <- unlist(lapply(ps, rbinom, n=n, size=1)) # n * length(ps) trials drawn from a binomial distribution
# calculate recency-weighted probability of finding strategy s
c(alphas,betas,beta_mean,beta_variance) %<-% get_maggi(data)
# compare to output from maggi's python code
data_from_maggi <- read.csv('../maggi_toolbox/test_output.csv')
plot(1:length(beta_variance),1/beta_variance,type="l",col="navy")
points(1:length(data_from_maggi$Precision),data_from_maggi$Precision,type="l",col="darkorange")
plot(1:length(data),alphas,type="l",col="darkgreen")
points(1:length(data),betas,type="l",col="navy")
points(1:length(data_from_maggi$Alpha),data_from_maggi$Alpha,type="l",col="pink")
points(1:length(data_from_maggi$Beta),data_from_maggi$Beta,type="l",col="darkred")
increments <- seq(0,1,by=.01)
plot(increments,dbeta(increments,alphas[length(data)],betas[length(data)]),type="l",col="darkgreen")
points(increments,dbeta(increments,data_from_maggi$Alpha[length(data_from_maggi$Alpha)],data_from_maggi$Beta[length(data_from_maggi$Beta)]),type="l",col="orange")
