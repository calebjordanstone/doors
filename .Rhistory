version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
# figure settings
title_sz <- 30
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
fnl <- file.path(
project_path, "res", paste(
paste(version, exp, mes, "transitions", sep = "_"),
".csv", sep = ""
)
)
res <- read_csv(fnl)
# make the figure
res %>% ggplot() +
geom_scatter(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, width = 0.9, height = 0.9, alpha = 1
) +
theme_minimal() + ylim(0.5, 4.5) +
xlim(0.5, 4.5) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
# TODO: remove redundancy bw door_correct and door_cc produce alternate results grouped by door
# identity instead of nclicks
### sources
library(tidyverse)
source(file.path(getwd(), "src", "get_subs.R"))
source(file.path(getwd(), "src", "get_switch.R"))
source(file.path(getwd(), "src", "get_data.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
sess <- c("ses-learn", "ses-train", "ses-test")  #session: 'ses-learn','ses-train','ses-test'. can select one (e.g. ses <- c('ses-learn')) or multiple (e.g. ses <- c('ses-train','ses-test'))
# !you can change the following settings if you want to, but the defaults will usually be fine
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if (mes == "clicks") {
idx <- 1
} else {
idx <- 2
}
apply_threshold <- FALSE  #only retain events that lasted more than a given duration?
min_dur <- 0.1  #minimum duration
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
data_path <- file.path("/Users/lydiabarnes/OneDrive - UNSW/task switch and transfer/data-sandpit", version)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
subs <- get_subs(exp, version)
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), door = integer(), door_correct = integer(),
on = numeric(), off = numeric(), door_cc = integer(), door_oc = integer(), switch = integer(), train_type = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
for (ses in sess) {
train_type <- NA
if (ses == "ses-test") {
# we calculate people's training group from the switch rate in their train phase data.
# copy that information into the test phase data
train_type <- grp_data %>%
filter(sub == sub & ses == 2) %>%
select(train_type)
}
data <- get_data(data_path, exp, sub, ses, train_type, apply_threshold, min_dur)  #load and format raw data
grp_data <- rbind(grp_data, data[[idx]])  #add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
}
}
# save the formatted data
fnl <- file.path(
project_path, "res", paste(
paste(version, exp, mes, "evt", sep = "_"),
".csv", sep = ""
)
)
write_csv(grp_data, fnl)
### extract accuracy and response time averages from event data
# by trial
res <- grp_data %>%
group_by(sub, ses, t, context, train_type) %>%
summarise(
switch = max(switch),
n_clicks = n(), n_correct = sum(door_correct),
n_cc = sum(door_cc),
n_oc = sum(door_oc),
accuracy = n_correct/n_clicks,
)
rt <- grp_data %>%
group_by(sub, ses, t, context, train_type) %>%
filter(door_correct == 1) %>%
summarise(rt = min(off))  #time to first correct click offset
res$rt <- rt$rt
fnl <- file.path(
project_path, "res", paste(
paste(version, exp, mes, "trl", sep = "_"),
".csv", sep = ""
)
)
write_csv(res, fnl)
# by subject
res <- res %>%
group_by(sub, ses, context, switch, train_type) %>%
summarise(
n_clicks = mean(n_clicks),
n_cc = mean(n_cc),
n_oc = mean(n_oc),
rt = mean(rt),
accuracy = mean(accuracy)
)
fnl <- file.path(
project_path, "res", paste(
paste(version, exp, mes, "avg", sep = "_"),
".csv", sep = ""
)
)
write_csv(res, fnl)
apply_threshold <- FALSE  #only retain events that lasted more than a given duration?
### sources
library(tidyverse)
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
# figure settings
title_sz <- 30
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
fnl <- file.path(
project_path, "res", paste(
paste(version, exp, mes, "transitions", sep = "_"),
".csv", sep = ""
)
)
res <- read_csv(fnl)
# make the figure
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, width = 0.9, height = 0.9, alpha = 1
) +
theme_minimal() + ylim(0.5, 4.5) +
xlim(0.5, 4.5) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
# save it
fnl <- file.path(
project_path, "fig", paste(
paste(
version, exp, mes, "transitions-accuracy",sep = "_"
),
".pdf", sep = ""
)
)
ggsave(fnl, plot = last_plot())
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, width = 0.9, height = 0.9, alpha = 1
) +
theme_minimal() + ylim(0.5, 4.5) +
xlim(0.5, 4.5) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, width = 0.9, height = 0.9, alpha = 1
) +
theme_minimal() + ylim(0,1) +
xlim(0,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
# make the figure
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) +
xlim(0,5) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
# make the figure
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
fnl <- file.path(
project_path, "fig", paste(
paste(
version, exp, mes, "transitions-accuracy",sep = "_"
),
".pdf", sep = ""
)
)
ggsave(fnl, plot = last_plot())
View(res)
# make the figure
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(.2,1.05) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(.25,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res$transition_rate_log <- log(res$transition_rate)
res %>% ggplot() +
geom_point(
aes(x = transition_rate_log, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(.25,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
View(res)
res %>% ggplot() +
geom_point(
aes(x = transition_rate_log, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(-1,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res %>% ggplot() +
geom_point(
aes(x = transition_rate_log, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(-1,0) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res$transition_rate_exp <- exp(res$transition_rate)
View(res)
res %>% ggplot() +
geom_point(
aes(x = transition_rate_exp, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(0,3) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
# make the figure
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(0,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
View(res)
res %>% filter(ses==2) %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(0,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res %>% filter(ses==1) %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(0,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res %>% filter(ses==3) %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(0,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res %>% filter(ses==1) %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(0,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
res %>% ggplot() +
geom_point(
aes(x = transition_rate, y = accuracy),
show.legend = FALSE, alpha = 1
) +
theme_minimal() + ylim(0,1) + xlim(0,1) +
labs(
title = "Transition Rate by Accuracy", x = "Transition Rate", y = "Accuracy"
) +
theme(
axis.text.x = element_text(size = label_sz),
axis.text.y = element_text(size = label_sz),
legend.text = element_text(size = label_sz),
plot.title = element_text(size = title_sz),
axis.title.x = element_text(size = label_sz),
axis.title.y = element_text(size = label_sz),
legend.title = element_text(size = label_sz)
)
