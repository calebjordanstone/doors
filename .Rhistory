# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
View(path_match)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
alg
alg=="tsp"
path
path,trial$door[1]
unclicked <- doors_cc[!doors_cc %in% path]
unclicked
unclicked <- c(unclicked,path[1]
)
unclicked <- c(unclicked,path[1])
unclicked <- doors_cc[!doors_cc %in% path]
if(alg=="tsp"){unclicked <- c(unclicked,path[1])} #make a loop!
unclicked <- c(unclicked,path[1])
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
paths
path[1]
path[[1]]
unclicked <- doors_cc[!doors_cc %in% path]
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
d <- data.frame(matrix(unlist(path), nrow=1, byrow=FALSE))
d <- do.call("rbind", replicate(nrow(paths), d, simplify = FALSE))
if(alg=="tsp"){
f <- data.frame(matrix(path[1], nrow=1, byrow=FALSE))
f <- do.call("rbind", replicate(nrow(paths), f, simplify = FALSE))
paths <- cbind(d,paths,f)
}else{
paths <- cbind(d,paths)
}
unclicked <- doors_cc[!doors_cc %in% path]
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
d <- data.frame(matrix(unlist(path), nrow=1, byrow=FALSE))
d <- do.call("rbind", replicate(nrow(paths), d, simplify = FALSE))
f <- data.frame(matrix(path[1], nrow=1, byrow=FALSE))
f <- do.call("rbind", replicate(nrow(paths), f, simplify = FALSE))
paths <- cbind(d,paths,f)
paths
unclicked <- doors_cc[!doors_cc %in% path]
paths <- as_tibble(permutations(n = length(unclicked), r = length(unclicked), v = unclicked))
d <- matrix(unlist(path), nrow=1, byrow=FALSE)
d <- data.frame(d)
d <- do.call("rbind", replicate(nrow(paths), d, simplify = FALSE))
f <- matrix(path[1], nrow=1, byrow=FALSE)
f <- data.frame(f)
f <- do.call("rbind", replicate(nrow(paths), f, simplify = FALSE))
paths <- cbind(d,paths,f)
paths
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
View(path_match)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "transitions", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[2]], fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "travelled", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[3]], fnl)
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "transitions", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[2]], fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "travelled", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[3]], fnl)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
counts <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "reclicks", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[1]], fnl)
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "transitions", sep = "_"), ".csv",
sep = ""))
write_csv(counts[[2]], fnl)
reclicks <- counts[[1]]
transitions_accuracy <- counts[[2]]
path_match <- counts[[3]]
View(reclicks)
View(transitions_accuracy)
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
View(data)
View(opt)
events <- data %>%
filter(switch == 1, door_oc == 1)
reclicks <- events %>%
group_by(sub, ses, t, context, subses) %>%
summarise(n = n(), n_reclicks = n() - length(unique(door)))
reclicks <- reclicks %>%
group_by(sub, ses, context, subses) %>%
summarise(clicks = mean(n), reclicks = mean(n_reclicks))
View(reclicks)
events <- data %>%
filter(switch == 0)
accuracy <- events %>%
group_by(sub, ses, t, context, subses) %>%
summarise(n_clicks = n(), n_correct = sum(door_cc), accuracy = n_correct/n_clicks)
accuracy <- accuracy %>%
group_by(sub, ses, context, subses) %>%
summarise(accuracy = mean(accuracy))
transitions <- data.frame(sub = integer(), ses = integer(), context = integer(), subses = integer(),
transition_tril = double(), transition_counts = double())
for (su in unique(data$sub)) {
for (se in unique(data$ses)) {
for (co in unique(data$context)) {
for (ss in unique(data$subses)) {
# select stay trials
events <- data %>% filter(switch == 0, sub == su, ses == se, context == co, subses == ss, door_cc == 1)
# initialise a matrix
transition_counts <- matrix(0, nrow = 16, ncol = 16)
# select a trial
for (tr in unique(events$t)) {
trial <- events %>% filter(t == tr)
# for all trials with more than one event, record door transitions
if (nrow(trial) > 1) {
for (i in 2:nrow(trial)) {
door <- trial$door[i]
previous <- trial$door[i - 1]
transition_counts[previous, door] <- 1  #yes, this transition happened
}
}
}
# clear the lower triangle of the matrix. this should ignore transitions in one
# direction
idx <- lower.tri(transition_counts, diag = FALSE)
transition_tril <- transition_counts
transition_tril[idx] <- 0
# for each door that was transitioned to, sum that column to get n-transitions
transition_tril <- colSums(transition_tril)
# discard any doors that were never selected, then take the mean
transition_tril <- mean(transition_tril[transition_tril != 0])
# repeat, now using the full matrix. this counts 1 -> 2 and 2 -> 1 as separate
# transitions
transition_counts <- colSums(transition_counts)
transition_counts <- mean(transition_counts[transition_counts != 0])
if (!is.nan(transition_counts)) {
# store
transitions[nrow(transitions) + 1, ] <- data.frame(su, se, co, ss, transition_tril,
transition_counts)
}
}
}
}
}
transitions_accuracy <- accuracy %>%
add_column(transition_tril = transitions$transition_tril, transition_counts = transitions$transition_counts)
### following a shortest path?
path_match <- data.frame(sub = integer(), ses = integer(), t = integer(), context = integer(), subses = integer(),match_tsp = double(),
travelled_tsp = double(),shortest_tsp = double(),overshoot_tsp = double(),match_hp = double(),
travelled_hp = double(),shortest_hp = double(),overshoot_hp = double())
for (su in unique(data$sub)) {
for (se in c(1, 2)) {
for (co in unique(data$context)) {
for (ss in unique(data$subses)) {
# get clicks on stay trials
events <- data %>% filter(switch == 0, sub == su, ses == se, context == co, door_cc == 1, subses == ss)
# make the data frame
tmp <- data.frame(sub = integer(), ses = integer(), t = integer(), context = integer(), subses = integer())
for (tr in unique(events$t)){
tmp[nrow(tmp)+1,] <- data.frame(su,se,tr,co,ss)
}
### travelling salesman solutions (return to start)
opt_sub <- opt %>% filter(sub == su, context == co, algorithm == "tsp")
df <- compare_paths(graph,events,opt_sub,"tsp")
df_tsp <- df %>% rename(match_tsp = match,shortest_tsp = shortest, travelled_tsp = travelled, overshoot_tsp = overshoot)
### shortest hamiltonian path (don't return to start)
opt_sub <- opt %>% filter(sub == su, context == co, algorithm == "hp")
df <- compare_paths(graph,events,opt_sub,"hp")
df_hp <- df %>% rename(match_hp = match,shortest_hp = shortest, travelled_hp = travelled, overshoot_hp = overshoot)
# stack
tmp <- cbind(tmp,df_tsp,df_hp)
path_match <- rbind(path_match,tmp)
}
}
}
}
path_match <- path_match %>%
group_by(sub, ses, context, subses) %>%
summarise(match_tsp = mean(match_tsp),shortest_tsp = mean(shortest_tsp), travelled_tsp = mean(travelled_tsp), overshoot_tsp = mean(overshoot_tsp),
match_hp = mean(match_hp),shortest_hp = mean(shortest_hp), travelled_hp = mean(travelled_hp), overshoot_hp = mean(overshoot_hp))
x <- bind_cols(transitions_accuracy,path_match,reclicks)
View(x)
View(transitions_accuracy)
View(reclicks)
t <- transitions_accuracy %>% select(accuracy,transition_tril,transition_counts)
r <- reclicks %>% select(clicks,reclicks)
x <- bind_cols(path_match,t,r)
View(x)
View(t)
t <- transitions_accuracy %>% select(accuracy,transition_tril,transition_counts)
t <- transitions_accuracy %>% ungroup() %>% select(accuracy,transition_tril,transition_counts)
View(t)
r <- reclicks %>% ungroup() %>% select(clicks,reclicks)
x <- bind_cols(path_match,t,r)
View(x)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
stereo <- count_stereo(data, opt, graph)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
stereo <- count_stereo(data, opt, graph)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
stereo <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv", sep = ""))
write_csv(stereo, fnl)
this_path[ii-1]
paths
length(this_path)
graph
View(graph)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# TODO:
### cluster participants based on stereotypy and accuracy
### use maggi method to trace change in stereotypy (extent or type)
### sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
### settings
version <- "study-01"  #pilot-data-00 (train and test), pilot-data-01 (learn and train), pilot-data-02 (learn and train, learn phase split into two parts)
exp <- "exp_lt"  #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
mes <- "clicks"  #measure: 'clicks' or 'hovers'. usually want 'clicks'.
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load event data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses==2)
### load shortest path data
fnl <- file.path(data_path, paste(paste(version, exp, mes, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
fnl <- file.path(project_path, "src-paths", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
### extract stereotypy metrics
stereo <- count_stereo(data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "stereotypy", sep = "_"), ".csv", sep = ""))
write_csv(stereo, fnl)
