reclicks <- reclicks %>%
group_by(sub, ses, context, subses) %>%
summarise(clicks = mean(n), reclicks = mean(n_reclicks))
View(reclicks)
### sources
library(tidyverse)
library(ggthemes)
library(ggExtra)
### settings
exp <- "exp_lt" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
label_sz <- 30
### paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### data
# stereotypy measures from train phase
fnl <- file.path(project_path, "res", paste(paste(exp, "stereotypy", sep = "_"), ".csv", sep = ""))
stereo <- read_csv(fnl, show_col_types = FALSE)
# general accuracy and response times for all phases
fnl <- file.path(project_path, "res", paste(paste(exp, "avg", sep = "_"), ".csv", sep = ""))
avg <- read_csv(fnl)
if (exp=="exp_lt"){
# rm sub-62, who happened to have a very low rate of switches into context 1 during training sub-session 2
avg <- avg %>% filter(sub!=62)
}
# add test phase accuracy to stereo data frame
stereo_performance <- stereo %>% group_by(sub, ses, context) %>% summarise_all(mean)
#   train phase performance
stereo_performance$accuracy <- avg %>% filter(ses==2,switch==0) %>% pull(accuracy)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# NB: people can get an imperfect match score for the optimal path but an overshoot of zero if they double-click.
#--------------------------------------------------------------------------------------------------
# sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
# settings
exp <- "exp_lt" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
# paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
#--------------------------------------------------------------------------------------------------
# load event data
fnl <- file.path(data_path, paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses == 2)
if(exp=="exp_lt"){
# rm sub-62, who happened to have a very low rate of switches into context 1 during training sub-session 2
data <- data %>% filter(sub!=62)
}
# load shortest path data
fnl <- file.path(data_path, paste(paste(exp, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
# load graph of distances between doors
fnl <- file.path(project_path, "src-stereo", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
#--------------------------------------------------------------------------------------------------
# extract stereotypy metrics
stereo <- count_stereo(exp, data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(exp, "stereotypy", sep = "_"), ".csv", sep = ""))
write_csv(stereo, fnl)
# lydia barnes, may 2024 counts, clusters, and/or traces stereotypical behaviour during training to
# explain performance at test
# NB: people can get an imperfect match score for the optimal path but an overshoot of zero if they double-click.
#--------------------------------------------------------------------------------------------------
# sources
library(tidyverse)
library(gtools)
source(file.path(getwd(), "src-stereo", "count_stereo.R"))
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
# paths
project_path <- getwd()
data_path <- file.path(project_path, "res")
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
#--------------------------------------------------------------------------------------------------
# load event data
fnl <- file.path(data_path, paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
data <- read_csv(fnl, show_col_types = FALSE)
data <- data %>% filter(ses == 2)
if(exp=="exp_lt"){
# rm sub-62, who happened to have a very low rate of switches into context 1 during training sub-session 2
data <- data %>% filter(sub!=62)
}
# load shortest path data
fnl <- file.path(data_path, paste(paste(exp, "opt-path", sep = "_"), ".csv", sep = ""))
opt <- read_csv(fnl, show_col_types = FALSE)
# load graph of distances between doors
fnl <- file.path(project_path, "src-stereo", "graph.csv")
graph <- unname(data.matrix(read_csv(fnl, col_names = FALSE, show_col_types = FALSE)))
#--------------------------------------------------------------------------------------------------
# extract stereotypy metrics
stereo <- count_stereo(exp, data, opt, graph)
# save to file
fnl <- file.path(project_path, "res", paste(paste(exp, "stereotypy", sep = "_"), ".csv", sep = ""))
write_csv(stereo, fnl)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 20
mk_sz <- 2
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1.5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 9, height = 45, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 10
mk_sz <- 2
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1.5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 9, height = 45, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 10
mk_sz <- 2
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1.5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 10
mk_sz <- 2
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
View(res)
sd(res$rt)
mean(res$rt)
mean(rt)+3*sd(rt)
mean(res$rt)+3*sd(res$rt)
3*sd(res$rt)
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
View(res)
?filter
res <- read.csv(fnl)
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
res <- group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
View(res)
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 5
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 9, height = 20, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 5
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 7, height = 20, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 5
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = .5) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 7, height = 21, limitsize = FALSE)
warnings()
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 10
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs
res <- res %>% filter(rt<(mean(rt)+3*sd(rt)))
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
# lydia barnes, august 2024
# visualises RT distributions per subject and condition
library(tidyverse)
library(ggforce)
library(ggsci)
library(ggpubr)
project_path <- getwd()
# settings
exp <- "exp_ts" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
label_sz <- 10
# data
fnl <- file.path(project_path, "res", paste(paste(exp, "trl", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# trim high RTs for each trial type
res <- res %>% group_by(switch) %>% filter(rt<(mean(rt)+3*sd(rt)))
pl <- list()
for (subject in unique(res$sub)){
tmp <- res %>% filter(sub==subject)
pl[[subject]] <- tmp %>%
ggplot() +
geom_density(aes(x=rt, colour = factor(ses), linetype = factor(switch)), linewidth = 1) +
guides(linetype=FALSE) +
theme_minimal() +
scale_color_brewer(
name = "Phase",
labels = c("Learn","Train","Test")
) +
labs(title = paste("Subject",subject,sep=" "), x = "RT", y = "Density") +
theme(
plot.title = element_text(size = label_sz),
axis.text.x = element_text(size = label_sz), axis.text.y = element_text(size = label_sz), legend.text = element_text(size = label_sz),
axis.title.x = element_text(size = label_sz), axis.title.y = element_text(size = label_sz), legend.title = element_text(size = label_sz)
)
}
ggarrange(plotlist=pl,nrow=25,ncol=4)
fnl <- file.path(project_path, "fig", paste(paste(exp, "rt-distributions_trimmed", sep = "_"), ".png", sep = ""))
ggsave(fnl, plot = last_plot(), width = 12, height = 45, limitsize = FALSE)
