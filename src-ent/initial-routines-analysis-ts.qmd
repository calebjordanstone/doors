---
title: "routine-individual-diffs-analysis-ts"
format: html
editor: visual
---

## How does the formation of routine impact task switching?

We have formulated a measure of routine which we have calculated per person. We now want to understand how this impacted their capacity to task switch in the final stage.

```{r}

library(tidyverse)
library(GGally)
library(ez)
library(wesanderson)
library(vioplot)
```

### Sorting data

First I will load and join the relevant data files. First the test data.

```{r}

exp_str = 'ts'

test_dat = read.csv(file=paste("../../doors-data/data-wrangled/exp", exp_str, "avg.csv", sep="_")) %>% 
  filter(ses == 3) %>% 
  select(sub, train_type, context, switch, accuracy, setting_sticks, setting_slips, rt_correct)

# now for each subject, compute the ratio on each dv between switch and stay trials, and then average across context
# there are too many zeros in setting errors to take the ratio, so I am going to do the difference of those
test_dat <- test_dat %>% group_by(sub, train_type, context) %>% 
  summarise(acc_ratio = accuracy[switch == 0]/accuracy[switch == 1],
            setst = setting_sticks[switch == 1] - setting_sticks[switch == 0],
            setsl = setting_slips[switch == 1] - setting_slips[switch == 0],
            rt_ratio = rt_correct[switch == 0]/rt_correct[switch == 1]) %>%
  group_by(sub, train_type) %>% summarise(acc_ratio = mean(acc_ratio),
                              setst = mean(setst),
                              setsl = mean(setsl),
                              rt_ratio = mean(rt_ratio))

```

And now the routine measure data

```{r}

r_dat = read.csv(file=paste("../../doors-data/data-wrangled/exp", exp_str, "rscore.csv", sep="_"))
head(r_dat)
```

Now I'll join the data all together

```{r}

all_dat <- inner_join(test_dat, r_dat, by="sub")
head(all_dat)
```

Now I have data, I can do a preliminary analysis.

## Checking how routine was affected by group

The variable group were less routine, as we would expect.

```{r}

all_dat$train_type <- as.factor(all_dat$train_type)
levels(all_dat$train_type) <- c("stable", "variable")
all_dat %>% ggplot(aes(x=log(r), fill=train_type, group=train_type)) + geom_density(alpha=0.5)
```

```{r}

with(all_dat, t.test(log(r) ~ train_type))
```

That replicates. Which is lovely!

Now I want to assess whether the measure of routine predicts the task switching measures.

I'll just do a qqplot to see how skewed the measures are.

**First the measure of routine**

```{r}

all_dat %>% ggplot(aes(sample=r)) + stat_qq() + stat_qq_line()
```

now I try logging

```{r}
all_dat %>% ggplot(aes(sample=log(r))) + stat_qq() + stat_qq_line()
```

That's somewhat better. We'll also screen for outliers shortly.

### Now the DVs

```{r}
all_dat %>% ggplot(aes(sample=acc_ratio)) + stat_qq() + stat_qq_line()
```

okies, has some outliers, lets log it

```{r}

all_dat %>% ggplot(aes(sample=log(acc_ratio))) + stat_qq() + stat_qq_line()
```

doesn't make a heap of difference, but will probably log for consistency

```{r}

all_dat %>% ggplot(aes(sample=setst)) + stat_qq() + stat_qq_line()
```

```{r}

# lets make the setst logable
min_setst = with(all_dat, min(setst)) + -0.1
all_dat %>% ggplot(aes(sample=log(setst+-1*min_setst))) + stat_qq() + stat_qq_line()
```

Upper tail is a bit better

```{r}

all_dat %>% ggplot(aes(sample=setsl)) + stat_qq() + stat_qq_line()
```

```{r}

min_setsl = with(all_dat, min(setsl)) + -0.1
all_dat %>% ggplot(aes(sample=log(setsl+-1*min_setsl))) + stat_qq() + stat_qq_line()
```

```{r}
all_dat %>% ggplot(aes(sample=rt_ratio)) + stat_qq() + stat_qq_line()
```

eech!

```{r}

all_dat %>% ggplot(aes(sample=log(rt_ratio))) + stat_qq() + stat_qq_line()
```

Not much better :( can do spearmans if needed, but will log all for consistency

```{r}

# first, aremove anyone who got a k4 diff of 0, as this means one of our estimates for them was infinity

all_dat <- all_dat %>% mutate(log_r=log(r),
                              log_acc=log(acc_ratio),
                              log_setst=log(setst+-1*min_setst),
                              log_setsl=log(setsl+-1*min_setsl),
                              log_rt=log(rt_ratio))
head(all_dat)

```

Now remove obs \> or \< 3 sdevs from the mean

```{r}

all_dat <- all_dat %>% ungroup()
cutoffs <- all_dat %>% summarise(mu_lr = mean(log_r),
                                 sd_lr = sd(log_r),
                                 mu_la = mean(log_acc),
                                 sd_la = sd(log_acc),
                                 mu_sst = mean(log_setst),
                                 sd_sst = sd(log_setst),
                                 mu_ssl = mean(log_setsl),
                                 sd_ssl = sd(log_setsl),
                                 mu_rt = mean(log_rt),
                                 sd_rt = sd(log_rt))

all_dat <- all_dat %>% mutate(log_r = if_else(log_r < cutoffs$mu_lr + 3*cutoffs$sd_lr &
                                    log_r > cutoffs$mu_lr - 3*cutoffs$sd_lr, log_r, NA),
                   log_acc = if_else(log_acc < cutoffs$mu_la + 3*cutoffs$sd_la &
                                    log_acc > cutoffs$mu_la - 3*cutoffs$sd_la, log_acc, NA),
                   log_sst = if_else(log_setst < cutoffs$mu_sst + 3 *cutoffs$sd_sst &
                                      log_setst > cutoffs$mu_sst - 3 *cutoffs$sd_sst, log_setst, NA),
                   log_ssl = if_else(log_setsl < cutoffs$mu_ssl + 3 *cutoffs$sd_ssl &
                                      log_setsl > cutoffs$mu_ssl - 3 *cutoffs$sd_ssl, log_setsl, NA),
                   log_rt = if_else(log_rt < cutoffs$mu_rt + 3 *cutoffs$sd_rt &
                                      log_rt > cutoffs$mu_rt - 3 *cutoffs$sd_rt, log_rt, NA),
                   )

all_dat <- all_dat %>% na.omit() # 5 people excluded

```

## Does routine formation predict differences between the task switching conditions?

Lets do the pairs plot:

```{r}

ggpairs(all_dat %>% select(train_type, log_r, log_acc, log_sst, log_ssl, log_rt),
        mapping=ggplot2::aes(colour = all_dat$train_type),
        upper = list(continuous = wrap("cor", method = "spearman")))
```
